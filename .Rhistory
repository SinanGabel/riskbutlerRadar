ff(mm=4)
ff(mm=7)
ff(mm=7,tt=5)
??formals
formals(yuima::setModel)
formals(yuima::setModel) <- alist(a=4,hurst=1)
ff(argfilter(ff,mm=2,gg=2))
?deparse
?substitute
formals(yuima::setModel)
typeof(formals(yuima::setModel))
?pairlist
ff
formals(ff)
alist(formals(ff))
argfilter(mm=4)
argfilter(ff, mm=4, mean=3)
alist(argfilter(ff, mm=4, mean=3))
ff() <- alist(argfilter(ff, mm=4, mean=3))
ff(alist(argfilter(ff, mm=4, mean=3)))
formals(yuima::setModel)
?pairlist
argfilter <- function(funktion, ...) {
xx <- names(formals(funktion))
yy <- list(...)
return(subset.default(yy, names(yy) %in% xx))
}
argfilter <- function(funktion, ...) {
xx <- names(formals(funktion))
yy <- pairlist(...)
return(subset.default(yy, names(yy) %in% xx))
}
argfilter(yuima::setModel, drift="3*x", diffusion="33*x",mm=3)
yuima::setModel(argfilter(yuima::setModel, drift="3*x", diffusion="33*x",mm=3))
yuima::setModel(argfilter(yuima::setModel, drift = "mu * x", diffusion = "sigma * x" ,mm=3))
mod <- yuima::setModel(argfilter(yuima::setModel, drift = "mu * x", diffusion = "sigma * x" ,mm=3))
rm(mod)
mod <- yuima::setModel(argfilter(yuima::setModel, drift = "mu * x", diffusion = "sigma * x" ,mm=3))
mod <- yuima::setModel(argfilter(yuima::setModel, drift = "mu * x", diffusion = "sigma * x"))
mod <- yuima::setModel(drift = "mu * x", diffusion = "sigma * x")
pairlist(formals(yuima::setModel))
pairlist(time.variable="my", formals(yuima::setModel))
pairlist(time.variable="my", alist(formals(yuima::setModel)))
typeof(formals(yuima::setModel))
?pairlist
c(time.variable="my", alist(formals(yuima::setModel)))
c(time.variable="my", formals(yuima::setModel))
rm(mod)
mod <- yuima::setModel(drift = "mu * x", diffusion = "sigma * x", c(time.variable="my", formals(yuima::setModel)))
argfun <- function(...) {
xx <- pairlist(...)
xx
}
argfun(drift = "mu * x", diffusion = "sigma * x", mm = 4)
argfun <- function(...) {
xx <- pairlist(...)
xx["drift"]
}
argfun(drift = "mu * x", diffusion = "sigma * x", mm = 4)
argfun <- function(...) {
xx <- pairlist(...)
yuima::setModel(xx["drift"], xx["diffusion"])
}
vv <- argfun(drift = "mu * x", diffusion = "sigma * x", mm = 4)
rm(vv)
vv <- argfun(some=TRUE, drift = "mu * x", diffusion = "sigma^2 * x", mm = 4)
?NULL
xx <- pairlist(drift = "mu * x", diffusion = "sigma^2 * x", mm = 4)
xx
xx["yy"] == NULL
is.null(xx["yy"])
is.null(xx["y2"])
xx["yy"]
xx["y5"]
xx["y5"] == <NA>
?undefined
??undefined
argfun <- function(...) {
xx <- pairlist(...)
yuima::setModel(xx["drift"], xx["diffusion"])
}
formals(yuima::setModel)
formals(yuima::setSampling)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, ...) {
xx <- pairlist(...)
ymod <- yuima::setModel(xx["drift"], xx["diffusion"], xx["xinit"])
#ysamp <- yuima::setSampling(xx["Terminal"], xx["n"], xx["delta"])
#ysim_arg <- argfilter(yuima::simulate, ...)
if (nsim == 1) {
s <- yuima::simulate(ymod, ...)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, ...) {
xx <- pairlist(...)
ymod <- yuima::setModel(xx["drift"], xx["diffusion"])
#ysamp <- yuima::setSampling(xx["Terminal"], xx["n"], xx["delta"])
#ysim_arg <- argfilter(yuima::simulate, ...)
if (nsim == 1) {
s <- yuima::simulate(ymod, ...)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
rm(aa,ls,pts,tt,vv,x,xx)
rm(argfilter,argfun,f,ff)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, ...) {
xx <- pairlist(...)
return(xx)
ymod <- yuima::setModel(xx["drift"], xx["diffusion"])
#ysamp <- yuima::setSampling(xx["Terminal"], xx["n"], xx["delta"])
#ysim_arg <- argfilter(yuima::simulate, ...)
if (nsim == 1) {
s <- yuima::simulate(ymod, ...)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, ...) {
ymod <- yuima::setModel(drift, diffusion, xinit)
if (nsim == 1) {
s <- yuima::simulate(ymod, ...)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
rm(X)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X <- yuima::simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
library("yuima")
library("yuima")
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima::simulate(yuima::setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, ...) {
ymod <- yuima::setModel(drift, diffusion, xinit)
ysam <- yuima::setSampling(Terminal, n)
if (nsim == 1) {
s <- yuima::simulate(ymod, ysam, ...)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, ...)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, ...)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima::simulate(yuima::setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), yuima::setSampling(Terminal = 1, n = 10))
X
X <- yuima::simulate(yuima::setModel(drift = "mu * x", diffusion = "sigma * x"), xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), yuima::setSampling(Terminal = 1, n = 10))
X
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, true.parameter, ...) {
ymod <- yuima::setModel(drift, diffusion)
ysam <- yuima::setSampling(Terminal, n)
if (nsim == 1) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
rm(X, yuima.simulate
)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit initial value vector of state variables (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @param true.parameter named list of parameters.
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, true.parameter = list()) {
ymod <- yuima::setModel(drift, diffusion)
ysam <- yuima::setSampling(Terminal, n)
if (nsim == 1) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit initial value vector of state variables (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @param parameter named list of parameters (name true.parameter in yuima).
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, parameter = list()) {
ymod <- yuima::setModel(drift, diffusion)
ysam <- yuima::setSampling(Terminal, n)
if (nsim == 1) {
s <- yuima::simulate(ymod, ysam, xinit = xinit, true.parameter = parameter)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit = xinit, true.parameter = parameter)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit = xinit, true.parameter = parameter)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
View(yuima.simulate)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
mean(X)
sd(X)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
mean(X)
sd(X)
