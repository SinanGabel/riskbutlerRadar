mod1 <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
n <- 10
res <- c()
m <- 1000
for(i in 1:m) {
#  tmp <- simulate(mod1, xinit = 100, true.parameter = list(mu = mle1@details$par["mu"], sigma = mle1@details$par["sigma"]), sampling = setSampling(Terminal = T, n = n))
tmp <- simulate(mod1, xinit = 100, true.parameter = mle1@coef, sampling = setSampling(Terminal = T, n = n))
res <- cbind(res, tmp@data@original.data)
}
proc.time() - tid
mod1 <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 2
n <- 252*2
# simulate some data for the estimation (alternatively use real data)
set.seed(123)
mod1 <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = T, n = n))
plot(mod1)
# estimate
low.par <- list(mu = 0, sigma = 0)
param.init <- list(mu = 0.10, sigma = 0.1)
upp.par <- list(mu = 0.50, sigma = 1)
mle1 <- qmle(mod1, start = param.init, lower = low.par, upper = upp.par)
summary(mle1)
library(radar)
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
estGBM()
summary(estGBM())
X <- summary(estGBM())
X@m2logL
X@coef
X@threshold
X@call
X@coef
estGBM()
estGBM()
estGBM()
library(radar)
estGBM()
estGBM()
X <- summary(estGBM())
X@model
X@threshold
X@call
X@m2logL
X@coef
toJSON(X@coef)
library(jsonlite)
toJSON(X@coef)
X@threshold
X@call
toJSON(X@call)
string(X@call)
toJSON([{"name":"Erik", "age":43}, {"name":"Anna", "age":32}])
fromJSON([{"name":"Erik", "age":43}, {"name":"Anna", "age":32}])
fromJSON('[{"name":"Erik", "age":43}, {"name":"Anna", "age":32}]')
elements_list = sprintf('{"id":"%s",
"top": "%s",
"startingWith":"%s",
"search":{"type":"%s", "keywords":[%s]}
}', element, top, startingWith, searchType, searchKW2)
?list
toJSON(list(a = 1, b = 2, c = 3))
toJSON(list(a = "1", b = "2", c = "3"))
toJSON(list(a = 1:3, b = "2", c = "3"))
mle
estGBM()
estGBM()
library(radar)
library(radar)
estGBM()
mle <- estGBM()
list( m2logL = mle@m2logL, coef = toJSON(mle@coef), call = mle@call )
list( "m2logL" = mle@m2logL, "coef" = toJSON(mle@coef), "call" = mle@call )
summary(mle)
mle
mle@details
mle@minuslogl()
mle@nobs
mle@fullcoef
mle@method
mle@details
summary(mle)
X <- summary(mle)
X@m2logL
library(radar)
estGBM()
estGBM()
estGBM()
library(radar)
library(radar)
estGBM()
estGBM()
library(radar)
estGBM()
X <- estGBM()
X
X@minuslogl()
X@details
X@fullcoef
X@vcov
X@min
X@coef
summary(X)
library(radar)
estGBM()
library(radar)
estGBM()
"summary,mle-method"(estGBM)
"summary,mle-method"(estGBM())
library(radar)
estGBM()
library(radar)
estGBM()
toJSON(estGBM())
X <- estGBM()
X
toJSON(X)
summary(X)
summary(estGBM())
X <- summary(estGBM())
X
toJSON(X)
X@m2logL
X@coef
toJSON(X@coef)
library(radar)
estGBM()
??"summary.mle-class"
??"summary.mle-class"
library(radar)
estGBM()
X <- estGBM()
X
summary.mle(X)
summary(X, signature("summary.mle")
)
summary(X, signature("summary.mle"))
X <- summary(X, signature("summary.mle"))
X
X@m2logL
library(radar)
estGBM()
estGBM()
library(radar)
estGBM()
library(radar)
estGBM()
yuima::summary(estGBM())
estGBM()
toJSON(estGBM())
X <- estGBM()
X
toJSON(X)
jsonlite::toJSON(X)
X@coef
X@fullcoef
X@details
library(stats4)
??summary
X
summary(X)
summary(X, object = "summary.mle")
summary(X, "summary.mle")
summary(X)
X <- summary(X)
X
X@call
X@m2logL
X <- estGBM()
X@model
X@coef
X@fullcoef
X@details
library(radar)
estGBM()
X <- estGBM()
X
X@details
library(radar)
estGBM()
??summary
??"summary,mle-method"
stats4::summary(estGBM())
library(radar)
estGBM()
X <- estGBM()
X@m2logL
X@m2logL
X@coef
mle <- X
list( m2logL = mle@m2logL, coef = toJSON(mle@coef), call = mle@call )
toJSON(list( m2logL = mle@m2logL, coef = toJSON(mle@coef), call = mle@call ))
library(jsonlite)
toJSON(list( m2logL = mle@m2logL, coef = toJSON(mle@coef), call = mle@call ))
list( m2logL = mle@m2logL, coef = toJSON(mle@coef), call = mle@call )
X <- list( m2logL = mle@m2logL, coef = toJSON(mle@coef), call = mle@call )
toJSON(X)
X
X <- list( m2logL = mle@m2logL, coef = mle@coef, call = mle@call )
X
toJSON(X)
jsonlite::toJSON(X)
library(radar)
estGBM()
library(radar)
estGBM()
estGBM()
library(radar)
estGBM()
library(radar)
estGBM()
X <- estGBM()
X
X$m2logL
X$coef
X$call
toString(X$call)
library(radar)
X <- estGBM()
X
toJSON(X)
library(radar)
estGBM()
?switch
x <- 10
f1 <- function(x) {
function() {
x + 10
}
}
f1(1)()
`+`(1, `*`(2, 3))
mean(, TRUE, x = c(1:10, NA))
f2 <- function(a, b) {
a * 10
}
f2(10, stop("This is an error!"))
??on.exit
library(radar)
estGBM(1,252,0.1,0.1)
estGBM(1,252,0.1,0.1)
estGBM(1,252,0.1,0.1)
library(radar)
estGBM(1,252,0.1,0.1)
estGBM(1,252,0.2,0.1)
estGBM(1,252,0.2,0.1)
estGBM(1,252,0.2,0.1)
estGBM(1,252,0.2,0.1)
estGBM(1,252,0.2,0.1)
estGBM(1,252,0.2,0.1)
estGBM(1,252,0.2,0.1)
estGBM(1,252,0.2,0.1)
estGBM(1,252,0.2,0.15)
estGBM(1,252,0.2,0.15)
estGBM(1,252,0.2,0.15)
estGBM(1,252,0.2,0.15)
estGBM(1,252,0.2,0.15)
estGBM(1,252,0.2,0.15)
estGBM(1,252,0.2,0.15)
library(radar)
estGBM(1,252,0.1,0.25)
estGBM(1,252,0.1,0.25)
estGBM(1,252,0.1,0.25)
mlefilter(estGBM(1,252,0.1,0.25))
X <- estGBM(1,252,0.1,0.25)
X
X@coef
X <- summary(X)
X
X@coef
row.names(X)
row.names(X@coef)
?cat
toJSON(X@coef, pretty = TRUE)
toJSON(X@coef, pretty = TRUE)
toJSON(X@coef)
cat(toJSON(X@coef)
)
?melt
??melt
library(reshape2)
y <- melt(X@coef, varnames = row.names(X@coef))
y
toJSON(y)
y <- melt(X@coef, varnames = column.names(X@coef))
X@coef
y <- melt(X@coef, varnames = colnames(X@coef))
y
toJSON(y)
y <- melt(X@coef)
y
toJSON(melt(X@coef))
toJSON(X@coef,row.names(X@coef))
toJSON(melt(X@coef,row.names(X@coef))
)
a <- array(c(1:23, NA), c(2,3,4))
a
melt(a, na.rm = TRUE)
melt(a, varnames=c("X","Y","Z"))
X@coef
toJSON(as.data.frame(X@coef))
library(radar)
estGBM(1,252,0.1,0.15)
X <- estGBM(1,252,0.1,0.15)
X
mlefilter(X)
?toString
library(radar)
estGBM()
estGBM()
estGBM()
estGBM(T=2)
library(radar)
?c
?list
list(1:10,0.1)
seq(1:10,by=2)
seq(1,10,by=2)
seq(stats::rnorm(20))
rnorm(20)
?rnorm
exp(rnorm(10))
exp(rnorm(10, mean=100, sd=10))
exp(rnorm(10, mean=100, sd=0.10))
exp(rnorm(10, mean=0, sd=0.10))
100*exp(rnorm(10, mean=0, sd=0.10))
100*exp(rnorm(100, mean=0, sd=0.10))
library(radar)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
ar
yuima.qmle(ar)
yuima.qmle(data = ar)
ar
library(radar)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
yuima.qmle(data = ar)
ar <- 100*exp(rnorm(1000, mean=0, sd=0.10))
yuima.qmle(data = ar)
yuima.qmle(data = log(ar))
mlefilter(yuima.qmle(data = log(ar)))
X <- yuima.qmle(data = log(ar))
X
summary(X)
library(radar)
ar <- 100*exp(rnorm(1000, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar))
library(radar)
library(radar)
X <- yuima.qmle(data = log(ar))
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
library(radar)
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
ar
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
library(radar)
ar
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
library(radar)
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), mydata = log(ar))
param.init
rm(list=ls())
param.init
param.start = list(mu = 0.10, sigma = 0.1); param.lower = list(mu = 0, sigma = 0); param.upper = list(mu = 0.50, sigma = 1)
param.lower
X <- yuima.qmle(param, data = log(ar))
ar
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
ar
X <- yuima.qmle(param, data = log(ar))
param
param.lower
param.start
library(radar)
ar
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", start = list("mu" = 0.10, "sigma" = 0.1), lower = list("mu" = 0, "sigma" = 0), upper = list("mu" = 0.50, "sigma" = 1), data = log(ar))
library(radar)
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", start = list("mu" = 0.10, "sigma" = 0.1), lower = list("mu" = 0, "sigma" = 0), upper = list("mu" = 0.50, "sigma" = 1), data = log(ar))
library(radar)
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list("mu" = 0.10, "sigma" = 0.1), lower = list("mu" = 0, "sigma" = 0), upper = list("mu" = 0.50, "sigma" = 1), data = log(ar))
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
list(mu = 0.10, sigma = 0.1)
list(mu = 0.10, "sigma" = 0.1)
rm(list=ls())
library(radar)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
ar
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
?start
?drift
?diffusion
?method
?param
?data
library(radar)
ar
yuima.qmle(p_drift = "mu * x", p_diffusion = "sigma * x", p_method="L-BFGS-B", p_start = list(mu = 0.10, sigma = 0.1), p_lower = list(mu = 0, sigma = 0), p_upper = list(mu = 0.50, sigma = 1), p_data = log(ar))
X <- yuima.qmle(p_drift = "mu * x", p_diffusion = "sigma * x", p_method="L-BFGS-B", p_start = list(mu = 0.10, sigma = 0.1), p_lower = list(mu = 0, sigma = 0), p_upper = list(mu = 0.50, sigma = 1), p_data = log(ar))
X
summary(X)
mlefilter(X)
getwd()
seed(123)
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(p_drift = "mu * x", p_diffusion = "sigma * x", p_method="L-BFGS-B", p_start = list(mu = 0.10, sigma = 0.1), p_lower = list(mu = 0, sigma = 0), p_upper = list(mu = 0.50, sigma = 1), p_data = log(ar))
X
abs(-2)
X@coef
X@coef@sigma
X@coef$sigma
X@fullcoef
X@fullcoef$sigma
X@fullcoef@sigma
X@coef
X@details
X@details$par
X@details$par@sigma
X@details$par$sigma
summary(X)
X <- summary(X)
x
X
X@coef
X@coef@mu
X@coef
as.dataframe(X@coef)
as.data.frame(X@coef)
X <- as.data.frame(X@coef)
X
X$Estimate
X$Estimate[0]
X$Estimate[1]
X$Estimate[2]
10e-2
1e-2
test_that("yuima.qmle", {
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(p_drift = "mu * x", p_diffusion = "sigma * x", p_method="L-BFGS-B", p_start = list(mu = 0.10, sigma = 0.1), p_lower = list(mu = 0, sigma = 0), p_upper = list(mu = 0.50, sigma = 1), p_data = log(ar))
X <- summary(X)
X <- as.data.frame(X@coef)
expect_that( abs(X$Estimate[1] - 0.1036490351) < 1e-5, is_true() )
expect_that( abs(X$Estimate[2] - 0.0002952567) < 1e-5, is_true() )
})
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
rm(list=ls())
library(radar)
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
; colnames(o) <- c("High","Low","Middle")
; rownames(o) <- c("current","former","never")
; smoke <- as.table(smoke)
; smoke
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(o) <- c("High","Low","Middle")
rownames(o) <- c("current","former","never")
smoke <- as.table(smoke)
smoke
smoke
smoke
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(smoke) <- c("High","Low","Middle")
rownames(smoke) <- c("current","former","never")
smoke <- as.table(smoke)
smoke
??stocks
mydata <- matrix(100*exp(rnorm(90, mean=0, sd=0.10)),ncol=3)
colnames(mydata) <- c("High","Low","Close")
mydata <- as.table(mydata)
mydata
write.table(mydata, "mydata.csv", sep = ",", quote = FALSE, row.names = FALSE)
sqlite.get("mydata", stmt = "select * from stdin")
load(file = "mydata.csv")
?load
?write.table
read.csv("mydata.csv")
db <- dbConnect(SQLite(), dbname = "./mydata.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "./mydata.sqlite")
db
dbWriteTable(conn = db, name = "mydata", value = "mydata.csv", row.names = FALSE, header = TRUE)
sqlite.get(url = "mydata.sqlite", stmt = "select * from stdin")
sqlite.get(url = "./mydata.sqlite", stmt = "select * from stdin")
sqlite.get(url = db, stmt = "select * from stdin")
sqlite.get(url = "./mydata.sqlite", stmt = "select * from mydata")
sqlite.get(url = "./mydata.sqlite", stmt = "select * from mydata")
compare(sqlite.get(url = "./mydata.sqlite", stmt = "select * from mydata"), mydata)
library(compare)
library("compare"")
;
;
rm(list=ls())
