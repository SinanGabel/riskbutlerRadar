list(1:10,0.1)
seq(1:10,by=2)
seq(1,10,by=2)
seq(stats::rnorm(20))
rnorm(20)
?rnorm
exp(rnorm(10))
exp(rnorm(10, mean=100, sd=10))
exp(rnorm(10, mean=100, sd=0.10))
exp(rnorm(10, mean=0, sd=0.10))
100*exp(rnorm(10, mean=0, sd=0.10))
100*exp(rnorm(100, mean=0, sd=0.10))
library(radar)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
ar
yuima.qmle(ar)
yuima.qmle(data = ar)
ar
library(radar)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
yuima.qmle(data = ar)
ar <- 100*exp(rnorm(1000, mean=0, sd=0.10))
yuima.qmle(data = ar)
yuima.qmle(data = log(ar))
mlefilter(yuima.qmle(data = log(ar)))
X <- yuima.qmle(data = log(ar))
X
summary(X)
library(radar)
ar <- 100*exp(rnorm(1000, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar))
library(radar)
library(radar)
X <- yuima.qmle(data = log(ar))
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
library(radar)
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
ar
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
library(radar)
ar
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
library(radar)
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
yuima.qmle(start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), mydata = log(ar))
param.init
rm(list=ls())
param.init
param.start = list(mu = 0.10, sigma = 0.1); param.lower = list(mu = 0, sigma = 0); param.upper = list(mu = 0.50, sigma = 1)
param.lower
X <- yuima.qmle(param, data = log(ar))
ar
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
ar
X <- yuima.qmle(param, data = log(ar))
param
param.lower
param.start
library(radar)
ar
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", start = list("mu" = 0.10, "sigma" = 0.1), lower = list("mu" = 0, "sigma" = 0), upper = list("mu" = 0.50, "sigma" = 1), data = log(ar))
library(radar)
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", start = list("mu" = 0.10, "sigma" = 0.1), lower = list("mu" = 0, "sigma" = 0), upper = list("mu" = 0.50, "sigma" = 1), data = log(ar))
library(radar)
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list("mu" = 0.10, "sigma" = 0.1), lower = list("mu" = 0, "sigma" = 0), upper = list("mu" = 0.50, "sigma" = 1), data = log(ar))
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
list(mu = 0.10, sigma = 0.1)
list(mu = 0.10, "sigma" = 0.1)
rm(list=ls())
library(radar)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
ar
yuima.qmle(drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1), data = log(ar))
?start
?drift
?diffusion
?method
?param
?data
library(radar)
ar
yuima.qmle(p_drift = "mu * x", p_diffusion = "sigma * x", p_method="L-BFGS-B", p_start = list(mu = 0.10, sigma = 0.1), p_lower = list(mu = 0, sigma = 0), p_upper = list(mu = 0.50, sigma = 1), p_data = log(ar))
X <- yuima.qmle(p_drift = "mu * x", p_diffusion = "sigma * x", p_method="L-BFGS-B", p_start = list(mu = 0.10, sigma = 0.1), p_lower = list(mu = 0, sigma = 0), p_upper = list(mu = 0.50, sigma = 1), p_data = log(ar))
X
summary(X)
mlefilter(X)
getwd()
seed(123)
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(p_drift = "mu * x", p_diffusion = "sigma * x", p_method="L-BFGS-B", p_start = list(mu = 0.10, sigma = 0.1), p_lower = list(mu = 0, sigma = 0), p_upper = list(mu = 0.50, sigma = 1), p_data = log(ar))
X
abs(-2)
X@coef
X@coef@sigma
X@coef$sigma
X@fullcoef
X@fullcoef$sigma
X@fullcoef@sigma
X@coef
X@details
X@details$par
X@details$par@sigma
X@details$par$sigma
summary(X)
X <- summary(X)
x
X
X@coef
X@coef@mu
X@coef
as.dataframe(X@coef)
as.data.frame(X@coef)
X <- as.data.frame(X@coef)
X
X$Estimate
X$Estimate[0]
X$Estimate[1]
X$Estimate[2]
10e-2
1e-2
test_that("yuima.qmle", {
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(p_drift = "mu * x", p_diffusion = "sigma * x", p_method="L-BFGS-B", p_start = list(mu = 0.10, sigma = 0.1), p_lower = list(mu = 0, sigma = 0), p_upper = list(mu = 0.50, sigma = 1), p_data = log(ar))
X <- summary(X)
X <- as.data.frame(X@coef)
expect_that( abs(X$Estimate[1] - 0.1036490351) < 1e-5, is_true() )
expect_that( abs(X$Estimate[2] - 0.0002952567) < 1e-5, is_true() )
})
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
rm(list=ls())
library(radar)
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
; colnames(o) <- c("High","Low","Middle")
; rownames(o) <- c("current","former","never")
; smoke <- as.table(smoke)
; smoke
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(o) <- c("High","Low","Middle")
rownames(o) <- c("current","former","never")
smoke <- as.table(smoke)
smoke
smoke
smoke
smoke <- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
colnames(smoke) <- c("High","Low","Middle")
rownames(smoke) <- c("current","former","never")
smoke <- as.table(smoke)
smoke
??stocks
mydata <- matrix(100*exp(rnorm(90, mean=0, sd=0.10)),ncol=3)
colnames(mydata) <- c("High","Low","Close")
mydata <- as.table(mydata)
mydata
write.table(mydata, "mydata.csv", sep = ",", quote = FALSE, row.names = FALSE)
sqlite.get("mydata", stmt = "select * from stdin")
load(file = "mydata.csv")
?load
?write.table
read.csv("mydata.csv")
db <- dbConnect(SQLite(), dbname = "./mydata.sqlite")
db <- dbConnect(RSQLite::SQLite(), dbname = "./mydata.sqlite")
db
dbWriteTable(conn = db, name = "mydata", value = "mydata.csv", row.names = FALSE, header = TRUE)
sqlite.get(url = "mydata.sqlite", stmt = "select * from stdin")
sqlite.get(url = "./mydata.sqlite", stmt = "select * from stdin")
sqlite.get(url = db, stmt = "select * from stdin")
sqlite.get(url = "./mydata.sqlite", stmt = "select * from mydata")
sqlite.get(url = "./mydata.sqlite", stmt = "select * from mydata")
compare(sqlite.get(url = "./mydata.sqlite", stmt = "select * from mydata"), mydata)
library(compare)
library("compare"")
;
;
rm(list=ls())
library("yuima")
library("RSQLite")
library("jsonlite")
home <- "/Users/sinan/"
detach("package:zoo", unload=TRUE)
library("zoo", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("radar",lib.loc="/Users/sinan/git-private/radar")
install.packages("Quandl")
library(radar)
library("yuima")
home <- "/Users/sinan/"
sqlite.get("Dropbox/code/R-code/sql/data/ecb.db", statement = "select * from stdin limit 10")
sqlite.get("Dropbox/code/R-code/sql/data/ecb.db", "select * from stdin limit 10")
?string
??string
?paste
paste("23","at")
paste("23","at","")
paste0("23","at","")
paste0("23","at")
sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"), "select * from stdin limit 10")
sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"),
'select * from stdin where CODE="USD" and DATE between "2016-01-05" and "2016-02-12" limit 100')
FX <- sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"),
'select * from stdin where CODE="USD" and DATE between "2012-01-01" and "2016-04-02" limit 100')
FX
sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"),
'select * from stdin where CODE="USD" and DATE between "2012-01-01" and "2016-04-02" order by DATE limit 100')
sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"),
'select * from stdin where CODE="USD" and DATE between "2012-01-01" and "2016-04-02" order by DATE DESC limit 100')
FX <- sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"),
'select * from stdin where CODE="USD" and DATE between "2012-01-01" and "2016-04-01" order by DATE DESC')
FX
FX <- sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"),
'select * from stdin where CODE="USD" and DATE between "2013-01-01" and "2016-04-01" order by DATE DESC')
FX
FX$CLOSE
n <- length(FX$CLOSE)
n
FX[1:10]
FX[,1:10]
FX[1:10,]
FX$DATE[-1]
FX_R <- log(FX$CLOSE[-1]/FX$CLOSE[-n])
n <- length(FX_R)
tmp <- c(1:10)
tmp
tmp[10]
t <- as.numeric(FX$DATE)-as.numeric(FX$DATE[n])
FX$DATE
as.numeric(FX$DATE)
?as.numeric
FX$DATE
FX$DATE[1]
FX$DATE[1]-FX$DATE[2]
as.difftime(FX$DATE[1], FX$DATE[2])
as.Date(FX$DATE[1])
as.Date(FX$DATE)
Dates <- as.Date(FX$DATE)
as.numeric(Dates)
t <- as.numeric(Dates)-as.numeric(Dates[n])
t
n <- length(FX$DATE)
Dates <- as.Date(FX$DATE)
# Time distances to the last observation date
t <- as.numeric(Dates)-as.numeric(Dates[n])
t
FX
FX <- sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"),
'select * from stdin where CODE="USD" and DATE between "2013-01-01" and "2016-04-01" order by DATE ASC')
FX
FX$CLOSE
n <- length(FX$DATE)
Dates <- as.Date(FX$DATE)
Dates
t <- as.numeric(Dates[n]) - as.numeric(Dates)
t
Dates
rev(t)
as.numeric(Dates) - as.numeric(Dates[1])
t <- as.numeric(Dates) - as.numeric(Dates[1])
FX_R <- log(FX$CLOSE[-1]/FX$CLOSE[-n])
c(1:10)
c(1:10)[-1]
plot(t[-1], FX_R, type="l")
plot(t, FX$CLOSE, type="l")
par(mfrow=c(2,1))
plot(t, FX$CLOSE, type="l")
plot(t[-1], FX_R, type="l")
par(mfrow=c(2,1))
plot(t, FX$CLOSE, type="l")
plot(t[-1], FX_R, type="l")
X <- ts(matrix(rnorm(200),100,2))
mydata <- setData(X)
str(get.zoo.data(mydata))
dim(mydata)
length(mydata)
plot(mydata)
mysde <- setYuima(data=setData(X))
str(get.zoo.data(mysde))
plot(mysde)
dim(mysde)
length(mysde)
mysde2 <- setYuima(data=setData(X, delta=1/252))
str(get.zoo.data(mysde2))
plot(mysde2)
dim(mysde2)
length(mysde2)
rm(list=ls())
library("radar")
library("yuima")
#library("RSQLite")
#library("jsonlite")
home <- "/Users/sinan/"
# Get series from earliest to lastest observation i.e. ASC
FX <- sqlite.get(paste0(home,"Dropbox/code/R-code/sql/data/ecb.db"),
'select * from stdin where CODE="USD" and DATE between "2013-01-01" and "2016-04-01" order by DATE ASC')
# Normal series
FX$CLOSE
# Dates
n <- length(FX$DATE)
Dates <- as.Date(FX$DATE)
# Time distances (including weekend distances) to the last observation date:
t <- as.numeric(Dates) - as.numeric(Dates[1])
# Return series
FX_R <- log(FX$CLOSE[-1]/FX$CLOSE[-n])
# plots of
par(mfrow=c(2,1))
plot(t, FX$CLOSE, type="l")
plot(t[-1], FX_R, type="l")
Dates[0]
Dates[1]
Dates[253]
Dates[254]
Dates[255]
Dates[256]
12*21
Dates[512]
Dates[510]
Dates[511]
Dates[511+252]
Dates[511+253]
Dates[255]
Dates[256]
Dates[256+256]
Dates[256+254]
Dates[256+255]
Dates[256+255+256]
Dates[256+255+255]
Dates[256+255+256]
difftime(Dates[1],Dates[n])
t[-n]
t[n]
t[1]
t[n]
t[n+1]
?min
min(FX$CLOSE)
max(FX$CLOSE)
max(FX$CLOSE)
mydata <- setData(FX$CLOSE, delta=1/255)
mydata
mydata@zoo.data
mydata <- setData(FX$CLOSE, delta=1/255)
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
mod <- setYuima(model = mod, data = mydata)
low.par <- list(mu = 0, sigma = 0)
param.init <- list(mu = 0.10, sigma = 0.1)
upp.par <- list(mu = 0.50, sigma = 1)
mle <- qmle(mod, start = param, lower = low.par, upper = upp.par)
summary(mle)
mydata@zoo.data
mydata@zoo.data[n]
mydata@zoo.data[n-1]
mydata@zoo.data[,n]
mydata@zoo.data[n,]
mydata@zoo.data
mydata@zoo.data[,]
mydata@zoo.data[,1]
mydata@zoo.data[1,]
mydata@zoo.data[1:1,]
mydata@zoo.data[,1:1]
mydata@zoo.data[,1]
mydata@zoo.data$
;
mydata
mydata$Data
mydata.-Data
mydata.Data
mydata[Data]
mydata["Data"]
mydata@zoo.data$
mydata@zoo.data$zoo
mydata@original.data
mydata@original.data[n]
mydata <- setData(FX$CLOSE, delta=1/255)
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
mod <- setYuima(model = mod, data = mydata)
low.par <- list(mu = 0, sigma = 0)
param.init <- list(mu = 0.10, sigma = 0.1)
upp.par <- list(mu = 0.50, sigma = 1)
mle <- qmle(mod, start = param.init, lower = low.par, upper = upp.par)
summary(mle)
mle
mle@coef
mydata@original.data
mydata@original.data[n]
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
nn <- 252
set.seed(123)
mod <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle1@coef, sampling = setSampling(Terminal = T, n = nn))
plot(mod)
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
nn <- 252
set.seed(123)
mod <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
plot(mod)
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1/12
nn <- 252
set.seed(123)
mod <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
plot(mod)
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
nn <- 252
set.seed(123)
mod <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
plot(mod, type="l")
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
nn <- 252
set.seed(123)
mod <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
par(mfrow=c(1,1))
plot(mod, type="l")
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
nn <- 100
set.seed(123)
mod <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
par(mfrow=c(1,1))
plot(mod, type="l")
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1/12
nn <- 31
set.seed(123)
mod <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
par(mfrow=c(1,1))
plot(mod, type="l")
tid <- proc.time()
res <- c()
m <- 500
for(i in 1:m) {
tmp <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
res <- cbind(res, tmp@data@original.data)
}
proc.time() - tid
par(mfrow=c(1,1))
plot(seq(0, T, by=T/n), apply(res, 1, mean), type="l")
plot(seq(0, T, by=T/n), apply(res, 1, sd), type="l")
par(mfrow=c(1,1))
plot(seq(0, T, by=T/nn), apply(res, 1, mean), type="l")
plot(seq(0, T, by=T/nn), apply(res, 1, sd), type="l")
mod <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1/12
nn <- 31
set.seed(123)
mod <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
par(mfrow=c(1,1))
plot(mod, type="l")
T/31
seq(0, T, by=T/n)
seq(0, T, by=T/nn)
1/12
res
mydata@original.data
mydata@zoo.data
seq(0, T, by=T/nn)
mod@sampling@grid
tmp@sampling@grid
tid <- proc.time()
res <- c()
m <- 500
for(i in 1:m) {
tmp <- simulate(mod, xinit = mydata@original.data[n], true.parameter = mle@coef, sampling = setSampling(Terminal = T, n = nn))
res <- cbind(res, tmp@data@original.data)
}
proc.time() - tid
par(mfrow=c(1,1))
plot(tmp@sampling@grid, apply(res, 1, mean), type="l")
plot(tmp@sampling@grid, apply(res, 1, sd), type="l")
apply(res, 1, mean)
tmp@sampling@grid
apply(res, 1, mean)
tmp@sampling@grid
avg <- apply(res, 1, mean)
vol <-  apply(res, 1, sd)
plot(avg)
plot(vol)
par(mfrow=c(2,1))
plot(avg)
plot(vol)
nn
seq(0, T, by=T/nn)
par(mfrow=c(1,1))
plot(seq(0, T, by=T/nn), avg, type="l", ylim=c(min(avg-2*vol)-1,max(avg+2*vol)+1), col=2)
lines(seq(0, T, by=T/nn), avg-vol, type="l", col=3)
lines(seq(0, T, by=T/nn), avg+vol, type="l", col=4)
lines(seq(0, T, by=T/nn), avg-2*vol, type="l", col=5)
lines(seq(0, T, by=T/nn), avg+2*vol, type="l", col=6)
par(mfrow=c(1,1))
plot(seq(0, T, by=T/nn), avg, type="l", ylim=c(min(avg-2*vol),max(avg+2*vol)), col=2)
lines(seq(0, T, by=T/nn), avg-vol, type="l", col=3)
lines(seq(0, T, by=T/nn), avg+vol, type="l", col=4)
lines(seq(0, T, by=T/nn), avg-2*vol, type="l", col=5)
lines(seq(0, T, by=T/nn), avg+2*vol, type="l", col=6)
100*exp(rnorm(100, mean=0, sd=0.10))
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), summary = FALSE, drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
library(radar)
library(radar)
install.packages("testthat")
library(radar)
?setwd
getwd()
