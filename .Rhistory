par(mfrow=c(2,1))
plot(x1)
plot(x2)
merge(y1, y2, all = FALSE)
merge(y1, y2)
raw <- merge(y1, y2)
mosaicplot(raw)
?mosaicplot
require(stats)
mosaicplot(Titanic, main = "Survival on the Titanic", color = TRUE)
## Formula interface for tabulated data:
mosaicplot(~ Sex + Age + Survived, data = Titanic, color = TRUE)
mosaicplot(table(raw))
table(raw)
?table
require(stats) # for rpois and xtabs
## Simple frequency distribution
table(rpois(100, 5))
with(warpbreaks, table(wool, tension))
table(state.division, state.region)
par(mfrow=c(2,1))
plot(x1)
plot(x2)
?merge
dat1
merge(y1,y2)
merge(dat1[[1]],dat1[[2]])
rbind(dat1[[1]],dat1[[2]])
install.packages("RSQLite")
library("RSQLite", lib.loc="~/Library/R/3.3/library")
install.packages("jsonlite")
install.packages("Quandl")
install.packages("devtools")
install.packages("testthat")
install.packages("sde")
install.packages("yuima")
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD/data")
# --- sqlite ---
# This connection creates an empty database if it does not exist
db <- dbConnect(RSQLite::SQLite(), dbname = "rd1.db")
writefile <- function(db, name, csv) {
# write data to disk
dbWriteTable(conn = db, name = "rd1", value = csv, row.names = FALSE, header = TRUE)
}
writefile(db, "rd1", "DK0009273419.csv")
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
filenames
?list.files
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
db <- dbConnect(RSQLite::SQLite(), dbname = "data/rd1.db")
dbWriteTable(db, "rd", dat1[[1]])
dbReadTable(db,"rd")
c(1,length(dat1))
seq(1,length(dat1))
seq(1,length(dat1))
lapply(seq(1,length(dat1)), print)
lapply(seq(1,length(dat1)), dat1)
apply
?apply
lapply(seq(1,length(dat1)), function(x) dat1[[x]])
lapply(seq(1,length(dat1)), function(x) dat1[[x]])
dbWriteTable(db, "rd", dat1[[1]])
dbWriteTable(db, "rd", dat1[[1]], append = TRUE)
dbWriteTable(db, "rd", dat1[[2]], append = TRUE)
dbReadTable(db,"rd")
dbDisconnect
dbDisconnect(db)
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql/rd1.db")
# writefile(db, "rd1", tabledata)
writefile <- function(tabledata) {
# write data to sql db on disk
dbWriteTable(db, "rd", tabledata, append = TRUE)
}
# write all the read-in .csv files to db
lapply(seq(1,length(dat1)), function(x) writefile(dat1[[x]]))
dbReadTable(db, "rd")
x <- dbReadTable(db, "rd")
View(x)
?read.csv
x$Price
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
r$ISIN <- name
r$Buyer <- NULL
r$Seller <- NULL
r$Trade.type <- NULL
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
?read.csv
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
r$ISIN <- name
}
dat1 <- lapply(filenames, readfile)
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
#r$ISIN <- name
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
dat1[[1]]
dat1[[1]]$ISIN <- "one"
dat1[[1]]
?sub
substring("123.csv")
substring("123.csv",1,1)
substring("123.csv",-4)
?substring
substring("DK0009273419.csv",1,12)
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
r$ISIN <- substring(name,1,12)
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
?read.csv
?unlink
filenames
filenames[1]
filenames[2]
dat1[1]
dat1[2]
dat1[[1]]
dat1[1:2
]
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
filenames[1]
substr(filenames[1]1,12)
substr(filenames[1],1,12)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql/rd1.db")
# writefile(db, "rd1", tabledata)
writefile <- function(x) {
dat1[[x]]$ISIN <- substr(filenames[x],1,12)
# write data to sql db on disk
dbWriteTable(db, "rd", dat1[[x]], append = TRUE)
}
lapply(seq(1,length(dat1)), function(x) writefile(x))
x <- dbReadTable(db, "rd")
View(x)
View(x)
dbGetQuery(db, "select * from rd limit 100")
dbGetQuery(db, "select * from rd limit 10")
dbGetQuery(db, 'select * from rd where ISIN = "DK0009273419" limit 10')
dbGetQuery(db, 'select * from rd where ISIN = "DK0009285504" limit 10')
dbGetQuery(db, 'select * from rd Time between "2016-03-15" and "2016-04-01" order by DATE ASC limit 10')
dbGetQuery(db, 'select * from rd where Time between "2016-03-15" and "2016-04-01" order by DATE ASC limit 10')
dbGetQuery(db, 'select * from rd where Time between "2016-03-15" and "2016-04-01" order by Time ASC limit 10')
dbGetQuery(db, 'select * from rd where Time between "2016-03-15" and "2016-04-01" order by Time ASC')
dbGetQuery(db, 'select Time, Price, ISIN from rd where Time between "2016-03-15" and "2016-04-01" order by Time ASC')
library("RSQLite")
library("zoo")
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
db <- dbConnect(RSQLite::SQLite(), dbname = "sql/rd1.db")
dbGetQuery(db, "select * from rd limit 10")
dbGetQuery(db, 'select Time, Price, ISIN from rd where Time between "2016-03-15" and "2016-04-01" order by Time ASC')
dbDisconnect(db)
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql/rd1.db")
# writefile(db, "rd1", tabledata)
writefile <- function(x) {
dat1[[x]]$ISIN <- substr(filenames[x],1,12)
# write data to sql db on disk
dbWriteTable(db, "rd", dat1[[x]], append = TRUE)
}
# write all the read-in .csv files to db
lapply(seq(1,length(dat1)), function(x) writefile(x))
x <- dbReadTable(db, "rd")
dbGetQuery(db, "select * from rd limit 10")
dbGetQuery(db, 'select * from rd where ISIN = "DK0009285504" limit 10')
dbDisconnect(db)
library(yuima)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1 , drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x",  xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
simulate(drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x",  xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
yuima::simulate(drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x",  xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
library(yuima)
mod1 <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
n <- 10
smp1 <- setSampling(Terminal = T, n = n)
tid <- proc.time()
res <- c()
m <- 500
for(i in 1:m) {
tmp <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = smp1)
res <- cbind(res, tmp@data@original.data)
}
proc.time() - tid
res
simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
X
X@data@original.data
tid <- proc.time()
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
proc.time() - tid
tid <- proc.time()
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
proc.time() - tid
tid <- proc.time()
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
proc.time() - tid
tid <- proc.time(); X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000)); proc.time() - tid
tid <- proc.time(); X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000)); proc.time() - tid
tid <- proc.time(); X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000)); proc.time() - tid
tid <- proc.time(); for(i in 1:m) {X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))}; proc.time() - tid
?subset
?subset2
??subset2
?.subset2
mtcars
library(yuima)
ymodel <- setModel(drift="(-1)*theta2*x", diffusion="sqrt(theta1^2+1)",
n <- 500
h <- 1/((n)^(2/3))
ysamp <- setSampling(Terminal=(n)^(1/3), n=n)
n <- 500
h <- 1/((n)^(2/3))
ysamp <- setSampling(Terminal=(n)^(1/3), n=n)
yuima <- setYuima(model=ymodel, sampling=ysamp)
param.true <- list(theta2=0.3, theta1=0.5)
yuima <- simulate(yuima, xinit=1, true.parameter=param.true)
yuima <- setYuima(model=ymodel, sampling=ysamp)
library(yuima)
ymodel <- setModel(drift="(-1)*theta2*x", diffusion="sqrt(theta1^2+1)", time.variable="t", state.variable="x", solve.variable="x")
n <- 500
h <- 1/((n)^(2/3))
ysamp <- setSampling(Terminal=(n)^(1/3), n=n)
yuima <- setYuima(model=ymodel, sampling=ysamp)
param.true <- list(theta2=0.3, theta1=0.5)
yuima <- simulate(yuima, xinit=1, true.parameter=param.true)
yuima
yuima@data@original.data
?.subset2
.subset2(yuima)
.subset2(yuima,data,original.data,1)
.subset2(yuima,1,1)
.subset2(yuima,1)
yuima
yuima@data
yuima@data@original.data
yuima@data@original.data[-1,1]
yuima@data@original.data[-1,]
_.subset2(yuima@data@original.data,-1)
_.subset2(yuima@data@original.data, 1)
_.subset2(yuima@data@original.data, -1, 1)
_.subset2(yuima@data@original.data)[-1]
_.subset2(yuima@data@original.data)[-1,]
.subset2(yuima@data@original.data, 1)
.subset2(yuima@data@original.data, -1)
.subset2(yuima@data@original.data, -1, )
.subset2(yuima@data@original.data, -1,1
)
.subset2(yuima@data@original.data, -1,)
.subset2(yuima@data@original.data, -1)[]
.subset2(yuima@data@original.data)[-1,]
.subset2(yuima@data@original.data,)[-1]
.subset2(yuima@data@original.data,1:n)[-1]
.subset2(yuima@data@original.data,1:10)[-1]
.subset2(yuima@data@original.data,1)[-1]
.subset2(yuima@data@original.data,1)[-1,]
.subset2(yuima@data@original.data)[-1,]
.subset2(yuima@data@original.data)[-1,1:10]
.subset2(yuima@data@original.data)[-1]
yuima@data@original.data
yuima@data@original.data[-1,]
yuima@data@original.data[-1,]
library(microbenchmark)
library(microbenchmark)
r <- c(0)
yuima@data@original.data
r <- c(0)
fun1 <- function() {
t <- yuima@data@original.data
r <- r + t[-1,]
}
fun2 <- function() {
r <- r + yuima@data@original.data[-1,]
}
microbenchmark(
"fun1" = fun1() ,
"fun2" = fun2()
)
r <- c(0)
fun1 <- function() {
t <- yuima@data@original.data
r <- r + t[-1,]
}
fun2 <- function() {
r <- r + yuima@data@original.data[-1,]
}
microbenchmark(
"fun1" = fun1() ,
"fun2" = fun2()
)
r <- c(0)
fun1 <- function() {
t <- yuima@data@original.data
r <- r + t[-1,]
}
fun2 <- function() {
r <- r + yuima@data@original.data[-1,]
}
microbenchmark(
"fun1" = fun1() ,
"fun2" = fun2()
)
r <- c(0)
fun1 <- function() {
t <- yuima@data@original.data
r <- r + t[-1,]
}
fun2 <- function() {
r <- r + yuima@data@original.data[-1,]
}
microbenchmark(
"fun1" = fun1() ,
"fun2" = fun2()
)
r <- c(0)
fun1 <- function() {
t <- yuima@data@original.data
r <- r + t[-1,]
}
fun2 <- function() {
r <- r + yuima@data@original.data[-1,]
}
microbenchmark(
"fun1" = fun1() ,
"fun2" = fun2()
)
r <- c(0)
fun1 <- function() {
t <- yuima@data@original.data
r <- r + t[-1,]
}
fun2 <- function() {
r <- r + yuima@data@original.data[-1,]
}
microbenchmark(
"fun1" = fun1() ,
"fun2" = fun2()
)
r <- c(0)
fun1 <- function() {
t <- yuima@data@original.data
r <- r + t[-1,]
}
fun2 <- function() {
r <- r + yuima@data@original.data[-1,]
}
microbenchmark(
"fun1" = fun1() ,
"fun2" = fun2()
)
library(sde)
N <- 10
T <- 1
x <- 10
theta <- c(0,5,3.5)
Dt <- 1/N
?numeric
Y <- N+1
Y
Y <- numeric(N+1)
Y
Y[1]
Y[1] <- x
Y[1]
Z <- rnorm(N)
Z
for(i in 1:N) {Y[i+1] <- Y[i] + (theta[1] - theta[2] * Y[i]) * Dt + theta[3] * sqrt(Dt) * Z[i]}
Y
Y <- ts(Y,start=0, deltat=1/N)
plot(Y)
?invisible
d <- expression(-5 * x)
d
?eval
bY <- expression( (23-11*x^2+1.5*x^4-(x^6)/(2^4))/(2*x) )
> bX <- expression( (6-11*x+6*x^2-x^3) )
> sX <- expression( sqrt(x) )
bY <- expression( (23-11*x^2+1.5*x^4-(x^6)/(2^4))/(2*x) )
bX <- expression( (6-11*x+6*x^2-x^3) )
sX <- expression( sqrt(x) )
X <- sde.sim(drift=bX, sigma=sX)
plot(X)
Y <- sde.sim(drift=bY, X0 = 2, method="shoji")
plot((Y/2)^2)
set.seed(123)
X <- sde.sim(drift=bX, sigma=sX)
plot(X)
set.seed(123)
Y <- sde.sim(drift=bY, X0 = 2, method="shoji")
plot(X)
plot((Y/2)^2)
plot(X)
plot((Y/2)^2)
d <- expression(-5 * x)
s <- expression (3.5)
sde.sim(X0=10,drift=d, sigma=s) -> X
plot(X)
sde.sim(X0=10,drift=d, sigma=s, M = 5) -> X
X
sde.sim(X0=10,drift=d, sigma=s, M = 50) -> X
X
set.seed(123)
d <- expression(-1*x)
s <- expression(2)
sde.sim(drift=d, sigma=s,N=50,delta=0.01) -> X
S <- function(t, x, theta) sqrt(theta[2])
B <- function(t, x, theta) -theta[1]*x
true.loglik <- function(theta) {
DELTA <- deltat(X)
lik <- 0
for(i in 2:length(X))
lik <- lik + dnorm(X[i], mean=X[i-1]*exp(-theta[1]*DELTA),
sd = sqrt((1-exp(-2*theta[1]*DELTA))*
theta[2]/(2*theta[1])),TRUE)
lik }
xx <- seq(-10,10,length=20)
sapply(xx, function(x) true.loglik(c(x,4))) -> py
sapply(xx, function(x) EULERloglik(X,c(x,4),B,S)) -> pz
sapply(xx, function(x) SIMloglik(X,c(x,4),B,S,M=10000,N=5)) -> pw
plot(xx,py,type="l",xlab=expression(beta),
ylab="log-likelihood",ylim=c(0,15)) # true
lines(xx,pz, lty=2) # Euler
lines(xx,pw, lty=3) # Simulated
?lines
