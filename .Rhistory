yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
if (summary == TRUE)
return(toJSON(list( coef = as.data.frame(t(r)))))
else
return(r)
}
X
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
library(radar)
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
library(radar)
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(foreach)
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
library(radar)
library(radar)
seq(1, 500 - 100 + 10, 10)
yuima.qmle.seq <- function(data, delta = 1/252, summary = TRUE, drift, diffusion, hurst = 0.5, solve.variable = "x", start, ...) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, state.variable = solve.variable)
# check foreach further: even, uneven indexes; vector or matrix etc.
w <- 100
step <- 10
l <- seq(1, length(data) - w + step, step)
est = start
# parallel %dopar% or %do%
#r <- foreach::foreach(i=l, .combine = cbind, .packages="foreach") %do% {
r <- foreach::foreach(i = l, .combine = cbind) %do% {
dat <- data[seq(i, i+w-1)]
dat <- yuima::setData(dat, delta = delta)
yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
if (summary == TRUE)
return(jsonlite::toJSON(list( call = list(seq = l, w = 100, step = 10), coef = as.data.frame(t(r)))))
else
return(r)
}
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
yuima.qmle.seq <- function(data, delta = 1/252, summary = TRUE, drift, diffusion, hurst = 0.5, solve.variable = "x", start, ...) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, state.variable = solve.variable)
# check foreach further: even, uneven indexes; vector or matrix etc.
w <- 100
step <- 10
n <- length(data)
l <- seq(1, n - w + step, step)
est = start
# parallel %dopar% or %do%
#r <- foreach::foreach(i=l, .combine = cbind, .packages="foreach") %do% {
r <- foreach::foreach(i = l, .combine = cbind) %do% {
dat <- data[seq(i, i+w-1)]
dat <- yuima::setData(dat, delta = delta)
yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
if (summary == TRUE)
return(jsonlite::toJSON(list( call = list(seq = l, w = w, step = step, n = n), coef = as.data.frame(t(r)))))
else
return(r)
}
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
library(radar)
devtools::document()
library(radar)
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
install.packages(c("RSQLite", "foreach", "DBI"))
library(radar)
install.packages("testthat")
install.packages("roxygen2")
devtools::load_all(".")
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
# estimate once
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
?step
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
# estimate once
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, window = 50, step = 5, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, window = 125, step = 5, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, window = 125, step = 5, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
mean(est[1,])
mean(est[2,])
est
plot(est)
plot(t(est))
est <- yuima.qmle.seq(data = X, window = 75, step = 1, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
plot(t(est))
length(est)
est
t(est)
ptm <- proc.time()
est <- yuima.qmle.seq(data = X, window = 100, step = 1, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
length(t(est))
12.24/802
ptm <- proc.time()
est <- yuima.qmle.seq(data = X, window = 100, step = 1, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
ptm <- proc.time()
est <- yuima.qmle.seq(data = X, window = 100, step = 1, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
?foreach
library(radar)
library(radar)
library(radar)
library(radar)
devtools::load_all(".")
library(radar)
library(yuima)
drift <- "m * x"
diffusion <- "s * x"
xinit <- 100
hurst <- 0.5
solve.variable <- "x"
T <- 1
n <- 500
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = xinit, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = list(m = -.10, s = .3))
# Examples of different time series
plot(X,type="l")
est <- yuima.qmle(data = log(X), delta = T/n, summary = FALSE, drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, method="L-BFGS-B", start = list(m = 0.10, s = 0.1), lower = list(m = -Inf, s = 0), upper = list(m = Inf, s = Inf))
Y <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = -1, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = as.list(est@coef))
plot(Y*xinit,type="l")
est <- yuima.qmle(data = log(-X), delta = T/n, summary = FALSE, drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, method="L-BFGS-B", start = list(m = 0.10, s = 0.1), lower = list(m = -Inf, s = 0), upper = list(m = Inf, s = Inf))
Y <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = -1, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = as.list(est@coef))
plot(exp(Y*log(xinit)),type="l")
log(-X)
log(X)
est <- yuima.qmle(data = log(X[-1]/X[-length(X)]), delta = T/n, summary = FALSE, drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, method="L-BFGS-B", start = list(m = 0.10, s = 0.1), lower = list(m = 0, s = 0), upper = list(m = 2, s = 2))
est
Y <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = 1, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = as.list(est@coef))
plot(exp(Y),type="l")
Y
cumprod(exp(Y))
cumprod(Y)
Y
log(X[-1]/X[-length(X)]
)
plot(log(X[-1]/X[-length(X)]), type ="l")
Y-1
Y <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = 0, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = as.list(est@coef))
Y
Y <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = 1, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = as.list(est@coef))
Y
exp(Y)
cumprod(exp(Y))
cumprod(exp(Y)/100)
exp(Y)/100
c <- exp(Y)/100
c
cumsum(c)
plot(c,type="l")
plot(c*X(-length(X)),type="l")
plot(c*X[-length(X)],type="l")
X[-length(X)]
X[length(X)]
plot(c*X[length(X)],type="l")
c
Y
exp(Y)
exp(Y)-1
exp(Y)
exp(Y)/100
cumsum(exp(Y)/100)
X[length(X)]*cumsum(exp(Y)/100)
X[length(X)]*cumsum(exp(Y))
X[length(X)]*cumsum(exp(Y)-1)
cumsum(exp(Y)-1)
exp(Y)
cumsum(exp(Y)/100)
exp(Y)/100
exp(Y)
plot(X[length(X)]*exp(Y),type="l")
plot(X,type="l")
exp(Y)
Y
plot(Y,type="l")
plot(exp(Y),type="l")
est <- yuima.qmle(data = log(X), delta = T/n, summary = FALSE, drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, method="L-BFGS-B", start = list(m = 0.10, s = 0.1), lower = list(m = -Inf, s = 0), upper = list(m = Inf, s = Inf))
Y <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = -1, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = as.list(est@coef))
plot(Y*xinit,type="l")
plot(Y,type="l")
plot(Y*xinit,type="l")
plot(X,type="l")
plot(log(X), type ="l")
plot(Y,type="l")
plot(X,type="l")
est <- yuima.qmle(data = log(X), delta = T/n, summary = FALSE, drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, method="L-BFGS-B", start = list(m = 0.10, s = 0.1), lower = list(m = -Inf, s = 0), upper = list(m = Inf, s = Inf))
Y <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = 1, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = as.list(est@coef))
plot(Y,type="l")
plot(Y*xinit,type="l")
plot(X,type="l")
plot(Y,type="l")
plot(exp(Y),type="l")
plot(Y,type="l")
plot(Y*xinit,type="l")
drift <- "m * x"
diffusion <- "s * x"
xinit <- 100
hurst <- 0.5
solve.variable <- "x"
T <- 1
n <- 500
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = drift, diffusion = diffusion, xinit = xinit, hurst = hurst, solve.variable = solve.variable, Terminal = T, n = n, parameter = list(m = -.10, s = .3))
plot(X,type="l")
plot(log(X), type ="l")
plot(log(X[-1]/X[-length(X)]), type ="l")
est <- yuima.qmle(data = log(X), delta = T/n, summary = FALSE, drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, method="L-BFGS-B", start = list(m = 0.10, s = 0.1), lower = list(m = -Inf, s = 0), upper = list(m = Inf, s = Inf))
est@coef
exp(est@coef)
rm(list=ls())
library(yuima)
## GBM https://en.wikipedia.org/wiki/Geometric_Brownian_motion
mod1 <- setModel(drift = "mu * x", diffusion = "sigma * x")
## sigma = 0.5 => 50 pct. volatility
set.seed(123)
par(mfrow=c(2,2))
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0.5), sampling = setSampling(Terminal = 1, n = 100))
plot(X, main="mu=0, sigma=0.5")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0), sampling = setSampling(Terminal = 1, n = 100))
plot(X, main="mu=0, sigma=0")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 100))
plot(X, main="mu=0, sigma=0.1")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0), sampling = setSampling(Terminal = 1, n = 100))
plot(X, main="mu=0.1, sigma=0")
# The last value is approximately 110
n <- length(X@data@original.data)
X@data@original.data[n]
rm(list=ls())
library(yuima)
## GBM https://en.wikipedia.org/wiki/Geometric_Brownian_motion
mod1 <- setModel(drift = "mu * x", diffusion = "sigma * x")
## sigma = 0.5 => 50 pct. volatility
set.seed(123)
par(mfrow=c(2,2))
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0.5), sampling = setSampling(Terminal = 1, n = 100))
plot(X, main="mu=0, sigma=0.5")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0), sampling = setSampling(Terminal = 1, n = 100))
plot(X, main="mu=0, sigma=0")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 100))
plot(X, main="mu=0, sigma=0.1")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0), sampling = setSampling(Terminal = 1, n = 100))
plot(X, main="mu=0.1, sigma=0")
set.seed(123)
par(mfrow=c(2,2))
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0.5), sampling = setSampling(Terminal = 2, n = 100))
plot(X, main="mu=0, sigma=0.5")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0), sampling = setSampling(Terminal = 2, n = 100))
plot(X, main="mu=0, sigma=0")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0, sigma = 0.1), sampling = setSampling(Terminal = 2, n = 100))
plot(X, main="mu=0, sigma=0.1")
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0), sampling = setSampling(Terminal = 2, n = 100))
plot(X, main="mu=0.1, sigma=0")
# The last value is approximately 110
n <- length(X@data@original.data)
X@data@original.data[n]
## Ex. Simulate a lot of paths
#
mod1 <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
n <- 100
tid <- proc.time()
res <- c()
m <- 500
for(i in 1:m) {
tmp <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = T, n = n))
res <- cbind(res, tmp@data@original.data)
}
proc.time() - tid
plot(seq(0, T, by=T/n), apply(res, 1, mean), type="l")
plot(seq(0, T, by=T/n), apply(res, 1, sd), type="l")
mod1 <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
n <- 252
# simulate some data for the estimation (alternatively use real data)
set.seed(123)
mod1 <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = T, n = n))
plot(mod1)
# estimate
low.par <- list(mu = 0, sigma = 0)
param.init <- list(mu = 0.10, sigma = 0.1)
upp.par <- list(mu = 0.50, sigma = 1)
mle1 <- qmle(mod1, start = param.init, lower = low.par, upper = upp.par)
summary(mle1)
names(mle1@details$par)
mle1@details$par["mu"]
mle1@details$par["sigma"]
# what is the sd of the returns series? => approx. 10 pct. p.a.
sd(log(mod1@data@original.data[-1]/mod1@data@original.data[-n-1]))*sqrt(n)
beta<-c(.5,.5)
mu<-c(0,0)
Lambda<-matrix(c(1,0,0,1),2,2)
x<-10 # the number of r.n
rNIG(x,1,beta,1,mu,Lambda)
plot(rNIG(x,1,beta,1,mu,Lambda),l="t")
plot(t(rNIG(x,1,beta,1,mu,Lambda)),l="t")
plot(rNIG(x,1,beta,1,mu,Lambda))
rNIG(x,1,beta,1,mu,Lambda)[1,]
plot(rNIG(x,1,beta,1,mu,Lambda)[1,])
plot(rNIG(100,1,beta,1,mu,Lambda)[1,])
plot(rNIG(100,1,beta,1,mu,Lambda)[1,], l="t")
plot(rNIG(100,1,beta,1,mu,Lambda)[1,], l="t")
plot(rNIG(100,1,beta,1,mu,Lambda)[1,], t="l")
plot(rNIG(1000,1,beta,1,mu,Lambda)[1,], t="l")
diff.matrix <- matrix(c("theta1"), 1, 1)
ymodel <- setModel(drift=c("(-1)*theta2*x"), diffusion=diff.matrix,
time.variable="t", state.variable="x", solve.variable="x")
n <- 100
ysamp <- setSampling(Terminal=(n)^(1/3), n=n)
yuima <- setYuima(model=ymodel, sampling=ysamp)
set.seed(123)
yuima <- simulate(yuima, xinit=1, true.parameter=list(theta1=0.3,
theta2=0.1))
QL <- quasilogl(yuima, param=list(theta2=0.8, theta1=0.7))
##QL <- ql(yuima, 0.8, 0.7, h=1/((n)^(2/3)))
QL
plot(yuima)
qmle(yuima, start=list(theta2=0.8, theta1=0.7))
devtools::load_all(".")
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
View(est)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
ptm <- proc.time()
# estimate sequence of windows of length=100 (default) and steps=10 (default)
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
ptm <- proc.time()
# estimate sequence of windows of length=100 (default) and steps=10 (default)
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
ptm <- proc.time()
# estimate sequence of windows of length=100 (default) and steps=10 (default)
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
ptm <- proc.time()
ptm <- proc.time()
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
X
ptm <- proc.time()
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 100, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
X
ptm <- proc.time()
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 100, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
ptm <- proc.time()
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 100, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
X
library(radar)
ptm <- proc.time()
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 100, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
X
ptm <- proc.time()
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 100, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 1, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
X
library(radar)
ptm <- proc.time()
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 100, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 1, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
View(X)
ptm <- proc.time()
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 100, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
X
ptm <- proc.time()
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 10, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 100, parameter = list(mu = 0.1, sigma = 0.07))
proc.time() - ptm
View(X)
View(X)
library(radar)
library(radar)
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), delta = 1, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
X <- stats4::summary(X)
X <- as.data.frame(X@coef)
View(X)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1 , drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x",  xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
sd(X)
abs(mean(X))
length(X)
log(ar)
sd(log(ar))
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), delta = 1, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
X <- stats4::summary(X)
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), delta = 1, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
X
print(X@fullcoef)
summary(X)
stats4::summary(X)
X@coef
X@coef$sigma
X@details
mydata <- matrix(100*exp(rnorm(90, mean=0, sd=0.10)),ncol=3)
colnames(mydata) <- c("High","Low","Close")
mydata <- as.table(mydata)
write.csv(mydata, "./mydata.csv", row.names=FALSE)
db <- dbConnect(RSQLite::SQLite(), dbname = "./mydata.db")
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(foreach)
library(radar)
mydata <- matrix(100*exp(rnorm(90, mean=0, sd=0.10)),ncol=3)
colnames(mydata) <- c("High","Low","Close")
mydata <- as.table(mydata)
write.csv(mydata, "./mydata.csv", row.names=FALSE)
db <- dbConnect(RSQLite::SQLite(), dbname = "./mydata.db")
dbWriteTable(conn = db, name = "mydata", value = "./mydata.csv", row.names = FALSE, header = TRUE)
on.exit(file.remove("./mydata.db"))
on.exit(file.remove("./mydata.csv"), add = TRUE)
dbDisconnect(db)
expect_that( all.equal(read.csv("./mydata.csv"), sqlite.sql(url = "./mydata.db", stmt = "select * from mydata")), is_true() )
library(radar)
??install.packages
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(foreach)
library(radar)
mydata <- matrix(100*exp(rnorm(90, mean=0, sd=0.10)),ncol=3)
colnames(mydata) <- c("High","Low","Close")
mydata <- as.table(mydata)
typeof(mydata)
mydata
?saveRDS
write.csv(mydata, "./mydata.csv", row.names=FALSE)
library(radar)
?saveRDS
saveRDS(mydata,"./data/mydata.rds")
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
devtools::load_all(".")
library(radar)
library(radar)
library(radar)
library(radar)
