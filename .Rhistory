typeof(d1)
typeof(y1)
merge(list(y1),list(y2))
merge(list(y1),list(y2), all=TRUE)
y1
plot(y1)
plot(y2)
plot(d1)
plot(x1)
plot(x2)
?aggregate
typeof(x1)
typeof(y1)
typeof(d1)
x1 <- zoo(d1$Price, d1$Time)
y1 <- aggregate(x1, time(x1), mean)
x2 <- zoo(d2$Price, d2$Time)
y2 <- aggregate(x2, time(x2), mean)
y1
y1 <- zoo(y1, time(y1))
y1
typeof(y1)
plot(y1)
y2
typeof(y2)
typeof(x1)
x1
typeof(d1)
?time
require(graphics)
cycle(presidents)
# a simple series plot
plot(as.vector(time(presidents)), as.vector(presidents), type = "l")
time(presidents)
as.vector(time(presidents))
time(y1)
as.vector(time(y1))
d1$Time
y1 <- zoo(y1, as.vector(time(y1)))
typeof(y1)
y1
y2 <- zoo(y2, as.vector(time(y2)))
merge(y1,y2)
par(mfrow=c(2,1))
plot(x1)
plot(x2)
plot(y1)
plot(y2)
plot.zoo(y1)
plot(na.approx(y1), type="l")
plot(na.approx(y2), type="l")
plot(na.approx(y1))
merge(y1, y2, all = TRUE)
plot(na.approx(merge(y1, y2, all = TRUE)))
plot(na.approx(merge(y1, y2, all = FALSE)))
merge(y1, y2, all = FALSE)
merge(y1, y2, all = TRUE)
rm(list=ls())
library("zoo")
setwd("~/Dropbox/code/R-code/RD")
d1 <- read.csv("data/DK0009297517.csv", sep=",")
d2 <- read.csv("data/DK0009299133.csv", sep=",")
# --- test ---
x1 <- zoo(d1$Price, d1$Time)
y1 <- aggregate(x1, time(x1), mean)
y1 <- zoo(y1, as.vector(time(y1)))
x2 <- zoo(d2$Price, d2$Time)
y2 <- aggregate(x2, time(x2), mean)
y2 <- zoo(y2, as.vector(time(y2)))
# show data
merge(y1, y2, all = TRUE)
yy <- merge(y1, y2, all = TRUE)
yy
plot(yy)
time(yy)
ts.plot(time(yy),gpars= list(yy))
plot(6:25,rnorm(20),type="b",xlim=c(1,30),ylim=c(-2.5,2.5),col=2)
par(new=T)
plot(rnorm(30),type="b",axes=F,col=3)
par(new=T)
typeof(yy)
yy
?na.locf
bz <- zoo(c(2,NA,1,4,5,2))
na.locf(bz)
na.locf(bz, fromLast = TRUE)
na.locf(yy)
?na.locf
z <- zoo(c(0.007306621, 0.007659046, 0.007681013,
0.007817548, 0.007847579, 0.007867313),
as.Date(c("1993-01-01", "1993-01-09", "1993-01-16",
"1993-01-23", "1993-01-30", "1993-02-06")))
g <- seq(start(z), end(z), "day")
na.locf(z, xout = g)
z
g
na.locf(yy)
na.locf(yy,na.rm = TRUE)
na.locf(yy, fromLast = TRUE)
na.locf(yy, fromLast = FALSe)
na.locf(yy, fromLast = FALS)
na.locf(yy, fromLast = FALSE)
na.locf(yy, fromLast = FALSE, na.rm = TRUE)
plot(na.locf(yy, fromLast = FALSE, na.rm = TRUE))
plot(time(yy),na.locf(yy, fromLast = FALSE, na.rm = TRUE))
plot(time(yy),na.locf(yy, fromLast = FALSE, na.rm = TRUE),col(2))
aggreate(yy)
aggregate(yy)
?aggregate
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean")
View(testDF)
?read.csv2
library("zoo")
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
list.files(R.home())
?list.files
list.files(.)
list.files(".")
list.files("data/.")
filenames <- list.files("data/.")
filesnames
filenames
?lapply
"xx" . "123"
"xx" . "123"
"xx" + "123"
?string
??string join
paste("xx","123")
paste("xx","123",sep = "")
?read.csv
readfile <- function(name) {
f <- paste("data/", name, ".csv", sep = "")
read.csv(f, sep = ",")
}
lapply(filenames, readfile)
filenames
readfile <- function(name) {
f <- paste("data/", name, sep = "")
read.csv(f, sep = ",")
}
lapply(filenames, readfile)
dat1 <- lapply(filenames, readfile)
dat1
dat1[1,]
dat1[1]
length(dat1)
library(sde)
data(quotes)
plot(quotes)
d <- MOdist(quotes)
cl <- hclust( d )
groups <- cutree(cl, k=4)
cmd <- cmdscale(d)
plot( cmd, col=groups)
text( cmd, labels(d) , col=groups)
plot(quotes, col=groups)
plot(quotes, col=groups,ylim=range(quotes))
plot(quotes)
data(quotes)
View(cmd)
quotes
plot( cmd, col=groups)
rm(list=ls())
library("zoo")
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
x1 <- zoo(dat1[1]$Price, dat1[1]$Time)
y1 <- aggregate(x1, time(x1), mean)
y1 <- zoo(y1, as.vector(time(y1)))
dat1[1]
dat1[[1]]
dat1[[1]]$Price
dat1[[1]]$Time
x1 <- zoo(dat1[[1]]$Price, dat1[[1]]$Time)
y1 <- aggregate(x1, time(x1), mean)
y1 <- zoo(y1, as.vector(time(y1)))
x2 <- zoo(dat1[[2]]$Price, dat1[[2]]$Time)
y2 <- aggregate(x2, time(x2), mean)
y2 <- zoo(y2, as.vector(time(y2)))
# show data
yy <- merge(y1, y2, all = TRUE)
# not perfect
na.locf(yy, fromLast = FALSE, na.rm = TRUE)
# plot data
par(mfrow=c(2,1))
plot(x1)
plot(x2)
plot(dat1[[1]]$Price)
plot(dat1[[1]]$Time, dat1[[1]]$Price)
?plot.data.frame
plot(dat1[[1]]$Time, dat1[[1]]$Price, type="l")
plot(dat1[[1]]$Time, dat1[[1]]$Price, type="h")
plot(dat1[[1]]$Time, dat1[[1]]$Price, type="p")
plot(dat1[[1]]$Time, dat1[[1]]$Price)
hist(dat1[[1]]$Price)
hist(dat1[[1]]$Price, main = "price", xlab = "price")
boxplot(dat1[[1]]$Price, main = "price", xlab = "price")
qqnorm(dat1[[1]]$Price, main = "price", xlab = "price")
qqnorm(log(dat1[[1]]$Price), main = "price", xlab = "price")
log(dat1[[1]]$Price)
x1 <- zoo(dat1[[1]]$Price, dat1[[1]]$Time)
y1 <- aggregate(x1, time(x1), mean)
y1 <- zoo(y1, as.vector(time(y1)))
x2 <- zoo(dat1[[2]]$Price, dat1[[2]]$Time)
y2 <- aggregate(x2, time(x2), mean)
y2 <- zoo(y2, as.vector(time(y2)))
# show data
yy <- merge(y1, y2, all = TRUE)
# not perfect
na.locf(yy, fromLast = FALSE, na.rm = TRUE)
# plot data
par(mfrow=c(2,1))
plot(x1)
plot(x2)
merge(y1, y2, all = FALSE)
merge(y1, y2)
raw <- merge(y1, y2)
mosaicplot(raw)
?mosaicplot
require(stats)
mosaicplot(Titanic, main = "Survival on the Titanic", color = TRUE)
## Formula interface for tabulated data:
mosaicplot(~ Sex + Age + Survived, data = Titanic, color = TRUE)
mosaicplot(table(raw))
table(raw)
?table
require(stats) # for rpois and xtabs
## Simple frequency distribution
table(rpois(100, 5))
with(warpbreaks, table(wool, tension))
table(state.division, state.region)
par(mfrow=c(2,1))
plot(x1)
plot(x2)
?merge
dat1
merge(y1,y2)
merge(dat1[[1]],dat1[[2]])
rbind(dat1[[1]],dat1[[2]])
install.packages("RSQLite")
library("RSQLite", lib.loc="~/Library/R/3.3/library")
install.packages("jsonlite")
install.packages("Quandl")
install.packages("devtools")
install.packages("testthat")
install.packages("sde")
install.packages("yuima")
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD/data")
# --- sqlite ---
# This connection creates an empty database if it does not exist
db <- dbConnect(RSQLite::SQLite(), dbname = "rd1.db")
writefile <- function(db, name, csv) {
# write data to disk
dbWriteTable(conn = db, name = "rd1", value = csv, row.names = FALSE, header = TRUE)
}
writefile(db, "rd1", "DK0009273419.csv")
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
filenames
?list.files
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
db <- dbConnect(RSQLite::SQLite(), dbname = "data/rd1.db")
dbWriteTable(db, "rd", dat1[[1]])
dbReadTable(db,"rd")
c(1,length(dat1))
seq(1,length(dat1))
seq(1,length(dat1))
lapply(seq(1,length(dat1)), print)
lapply(seq(1,length(dat1)), dat1)
apply
?apply
lapply(seq(1,length(dat1)), function(x) dat1[[x]])
lapply(seq(1,length(dat1)), function(x) dat1[[x]])
dbWriteTable(db, "rd", dat1[[1]])
dbWriteTable(db, "rd", dat1[[1]], append = TRUE)
dbWriteTable(db, "rd", dat1[[2]], append = TRUE)
dbReadTable(db,"rd")
dbDisconnect
dbDisconnect(db)
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql/rd1.db")
# writefile(db, "rd1", tabledata)
writefile <- function(tabledata) {
# write data to sql db on disk
dbWriteTable(db, "rd", tabledata, append = TRUE)
}
# write all the read-in .csv files to db
lapply(seq(1,length(dat1)), function(x) writefile(dat1[[x]]))
dbReadTable(db, "rd")
x <- dbReadTable(db, "rd")
View(x)
?read.csv
x$Price
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
r$ISIN <- name
r$Buyer <- NULL
r$Seller <- NULL
r$Trade.type <- NULL
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
?read.csv
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
r$ISIN <- name
}
dat1 <- lapply(filenames, readfile)
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
#r$ISIN <- name
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
dat1[[1]]
dat1[[1]]$ISIN <- "one"
dat1[[1]]
?sub
substring("123.csv")
substring("123.csv",1,1)
substring("123.csv",-4)
?substring
substring("DK0009273419.csv",1,12)
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
r$ISIN <- substring(name,1,12)
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
?read.csv
?unlink
filenames
filenames[1]
filenames[2]
dat1[1]
dat1[2]
dat1[[1]]
dat1[1:2
]
rm(list=ls())
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
filenames[1]
substr(filenames[1]1,12)
substr(filenames[1],1,12)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql/rd1.db")
# writefile(db, "rd1", tabledata)
writefile <- function(x) {
dat1[[x]]$ISIN <- substr(filenames[x],1,12)
# write data to sql db on disk
dbWriteTable(db, "rd", dat1[[x]], append = TRUE)
}
lapply(seq(1,length(dat1)), function(x) writefile(x))
x <- dbReadTable(db, "rd")
View(x)
View(x)
dbGetQuery(db, "select * from rd limit 100")
dbGetQuery(db, "select * from rd limit 10")
dbGetQuery(db, 'select * from rd where ISIN = "DK0009273419" limit 10')
dbGetQuery(db, 'select * from rd where ISIN = "DK0009285504" limit 10')
dbGetQuery(db, 'select * from rd Time between "2016-03-15" and "2016-04-01" order by DATE ASC limit 10')
dbGetQuery(db, 'select * from rd where Time between "2016-03-15" and "2016-04-01" order by DATE ASC limit 10')
dbGetQuery(db, 'select * from rd where Time between "2016-03-15" and "2016-04-01" order by Time ASC limit 10')
dbGetQuery(db, 'select * from rd where Time between "2016-03-15" and "2016-04-01" order by Time ASC')
dbGetQuery(db, 'select Time, Price, ISIN from rd where Time between "2016-03-15" and "2016-04-01" order by Time ASC')
library("RSQLite")
library("zoo")
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
db <- dbConnect(RSQLite::SQLite(), dbname = "sql/rd1.db")
dbGetQuery(db, "select * from rd limit 10")
dbGetQuery(db, 'select Time, Price, ISIN from rd where Time between "2016-03-15" and "2016-04-01" order by Time ASC')
dbDisconnect(db)
library("RSQLite")
library("zoo")
## --- init ---
setwd("~/Google\ Drive/local/Development/RiskButler/scripts/R/RD")
## --- read .csv files ---
filenames <- list.files("data/.")
readfile <- function(name) {
f <- paste("data/", name, sep = "")
r <- read.csv(f, sep = ",")
}
dat1 <- lapply(filenames, readfile)
# number of time series
length(dat1)
db <- dbConnect(RSQLite::SQLite(), dbname = "sql/rd1.db")
# writefile(db, "rd1", tabledata)
writefile <- function(x) {
dat1[[x]]$ISIN <- substr(filenames[x],1,12)
# write data to sql db on disk
dbWriteTable(db, "rd", dat1[[x]], append = TRUE)
}
# write all the read-in .csv files to db
lapply(seq(1,length(dat1)), function(x) writefile(x))
x <- dbReadTable(db, "rd")
dbGetQuery(db, "select * from rd limit 10")
dbGetQuery(db, 'select * from rd where ISIN = "DK0009285504" limit 10')
dbDisconnect(db)
library(yuima)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1 , drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x",  xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
simulate(drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x",  xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
yuima::simulate(drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x",  xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
library(yuima)
mod1 <- setModel(drift = "mu * x", diffusion = "sigma * x")
T <- 1
n <- 10
smp1 <- setSampling(Terminal = T, n = n)
tid <- proc.time()
res <- c()
m <- 500
for(i in 1:m) {
tmp <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = smp1)
res <- cbind(res, tmp@data@original.data)
}
proc.time() - tid
res
simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
X
X@data@original.data
tid <- proc.time()
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
proc.time() - tid
tid <- proc.time()
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
proc.time() - tid
tid <- proc.time()
X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))
proc.time() - tid
tid <- proc.time(); X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000)); proc.time() - tid
tid <- proc.time(); X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000)); proc.time() - tid
tid <- proc.time(); X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000)); proc.time() - tid
tid <- proc.time(); for(i in 1:m) {X <- simulate(mod1, xinit = 100, true.parameter = list(mu = 0.10, sigma = 0.1), sampling = setSampling(Terminal = 1, n = 1000))}; proc.time() - tid
