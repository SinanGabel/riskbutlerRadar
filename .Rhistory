library(riskbutlerRadar)
length("xxx")
length("(xxx dkddk)")
?foreach
??foreach
library(foreach)
foreach(i=1:3) %do% sqrt(i)
sekvens <- function(n, w, s) {
l <- seq(1, n - w + s, s)
if ((l[length(l)] + w - 1) > n ) {
l[length(l)] <- n - w + 1
}
return(l)
}
sekvens(10, 5, 1)
sekvens(10, 5, 2)
foreach(sekvens(10, 5, 2)) %do% sqrt(i)
foreach(i = sekvens(10, 5, 2)) %do% sqrt(i)
sqrt(6)
.libPaths( c( "~/R/userlib", .libPaths()) )
library(riskbutlerRadar)
json <- readLines("~/git-private/riskbutlerRadar/tests/sde_1.json")
json <- jsonlite::fromJSON(json)
json
json <- readLines("~/git-private/riskbutlerRadar/tests/sde_1.json")
json <- jsonlite::fromJSON(json)
est <- yuima.qmle.seq(data = log(json$data), window = 100, step = 50, delta = 1/500, summary = TRUE, drift = md$drift, diffusion = md$diffusion, hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = md$slu$start, lower = md$slu$lower, upper = md$slu$upper)
md <- yuima.sde(model = "yckls")
est <- yuima.qmle.seq(data = log(json$data), window = 100, step = 50, delta = 1/500, summary = TRUE, drift = md$drift, diffusion = md$diffusion, hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = md$slu$start, lower = md$slu$lower, upper = md$slu$upper)
est
est <- yuima.qmle.seq(data = json$data, window = 100, step = 50, delta = 1/500, summary = TRUE, drift = md$drift, diffusion = md$diffusion, hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = md$slu$start, lower = md$slu$lower, upper = md$slu$upper)
est
is_valid_variable_name <- function(x, allow_reserved = TRUE, unique = FALSE)
{
ok
#is name too long?
max_name_length <- if(getRversion() < "2.13.0") 256L else 10000L
#is it a reserved variable, i.e.
#an ellipsis or two dots then a number?
if(!allow_reserved)
{
ok[x == "..."] <- FALSE
ok[grepl("^\\.{2}[[:digit:]]+$", x)] <- FALSE
}
#are names valid (and maybe unique)
ok[x != make.names(x, unique = unique)] <- FALSE
ok
}
is_valid_variable_name(multi)
is_valid_variable_name("multi")
?make.names
make.names("multi")
make.names("dat")
?call
make.names("call")
?request
?req
?params
?coef
library(riskbutlerRadar)
library(riskbutlerRadar)
set.seed(123)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
md <- yuima.sde(model = "yckls")
est <- yuima.qmle.seq(data = X, window = 125, step = 5, delta = 1/500, summary = TRUE, drift = md$drift, diffusion = md$diffusion, hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = md$slu$start, lower = md$slu$lower, upper = md$slu$upper)
est
library(riskbutlerRadar)
toJSON(est)
jsonlite::toJSON(est)
?as.list
library(riskbutlerRadar)
set.seed(123)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
md <- yuima.sde(model = "yckls")
est <- yuima.qmle.seq(data = X, window = 125, step = 5, delta = 1/500, summary = TRUE, drift = md$drift, diffusion = md$diffusion, hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = md$slu$start, lower = md$slu$lower, upper = md$slu$upper)
est
library(riskbutlerRadar)
library(riskbutlerRadar)
set.seed(123)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
md <- yuima.sde(model = "yckls")
est <- yuima.qmle.seq(data = X, window = 125, step = 5, delta = 1/500, summary = TRUE, drift = md$drift, diffusion = md$diffusion, hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = md$slu$start, lower = md$slu$lower, upper = md$slu$upper)
est
2 != 5
2 == 5
library(riskbutlerRadar)
aiCalc()
aiCalc <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
recalculate <- FALSE
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
return(list(up = 0, down = 0, xinit = 1, symbol = symbol))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
db <- "/var/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
# Only recalculate if at least one hour has passed
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
xinit <- json$price
up <- json$up
down <- json$down
} else {
recalculate <- TRUE
}
}
}
# remove in production, for test only
#recalculate <- TRUE
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta <- 1/(365*24)
} else {
delta <- 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 1)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}', sep = "")
stmt <- paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", json(\'', value, '\'))', sep = "")
sqlite.sql(url = db, stmt = stmt)
}
# result
return(list(up = up, down = down, xinit = xinit, symbol = symbol))
}
aiCalc()
aiCalc()
ptm <- proc.time(); aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "CHF"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "DKK"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
aiFX <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "Info: sinan.gabel@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(result)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(up * 100, digits = 2), "percent and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
aiFX()
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "export", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "DKK"}, "base_currency": "GBP", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "DKK"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "DKK"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}'))
aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "USD", "date": "2017-12-10"}}'))
#' Forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' Todo: use cron to pre-generate model parameter estimations, always use latest estimations as start values
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiCalc <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
recalculate <- TRUE
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
return(list(up = 0, down = 0, xinit = 1, symbol = symbol))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
db <- "/var/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
# Only recalculate if at least one hour has passed
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
xinit <- json$price
up <- json$up
down <- json$down
recalculate <- FALSE
}
}
}
# remove in production, for test only
#recalculate <- TRUE
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta <- 1/(365*24)
} else {
delta <- 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 1)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}', sep = "")
stmt <- paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", json(\'', value, '\'))', sep = "")
sqlite.sql(url = db, stmt = stmt)
}
# result
return(list(up = up, down = down, xinit = xinit, symbol = symbol))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiCalc(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiCalc()
# proc.time() - ptm
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "USD", "date": "2017-12-10"}}'))
ptm <- proc.time(); aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}')); proc.time() - ptm
#' Return forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiFX <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "Info: sinan.gabel@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(result)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(up * 100, digits = 2), "percent and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
#' Return forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiFX <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "info@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(result)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(up * 100, digits = 2), "percent and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
# aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
#' Return forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiFX <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "info@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(result)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(up * 100, digits = 2), "percent and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
# aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "SEK"}, "base_currency": "NOK", "date": "2017-12-10"}}')); proc.time() - ptm
#' Return forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiFX <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "info@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(result)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(abs(up) * 100, digits = 2), "percent and the risk of loss is", format(abs(down) * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
# aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "SEK"}, "base_currency": "NOK", "date": "2017-12-10"}}')); proc.time() - ptm
#' Return forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiFX <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "info@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(result)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(abs(up) * 100, digits = 2), "percent and the risk of loss is", format(abs(down) * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000. The actual profit or loss can be higher than estimated.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
# aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "SEK"}, "base_currency": "NOK", "date": "2017-12-10"}}')); proc.time() - ptm
.libPaths( c( "~/R/userlib", .libPaths()) )
library(riskbutlerRadar)
library(riskbutlerRadar)
