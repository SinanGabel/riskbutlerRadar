dd <- getData(request = list(class = "FX", base_currency = "DKK", currency = "GBP", frequency = "day", limit = 100))
sims <- simulate_all(dd)
hist(sims)
mean(sims)
dd
sd(dd)
sd(sims)
?is.na
fromJSON('{"result": {"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}}')
library(jsonlite)
fromJSON('{"result": {"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}}')
fromJSON(' {"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
result <- fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
result
api <- result$parameters
api
base_currency <- api$base_currency
currency <- api$amount_currency$currency
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = "day", limit = 252))
## . Estimate parameters
nsim <- 1000
sims <- riskbutlerRadar::simulate_all(xdata, T = 1/52, nsim = nsim, delta = 1/365)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- (sims[round(q * nsim)] - xinit)/xinit    # q * 100 percent chance of down = down, or further down
## Save results to db for next user
## Return forecast info to api.ai
txt <- jsonlite::unbox(paste("The chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), " percent of your", api$activity_financial, "activity amount. To understand how this was calculated please go to riskbutler.com."))
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
aiUpdown()
aiUpdown(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", status = status, sessionId = "somerandomthing")
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 4
qmle_step <- 2
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = delta, drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
proc.time() - ptm
252/24
log(-1)
365/52
364/52
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 4
qmle_step <- 2
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = delta, drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 4
qmle_step <- 2
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 4
qmle_step <- 2
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 2
qmle_step <- 2
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
est <- riskbutlerRadar::yuima.qmle(data = log(data), delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
# proc.time() - ptm
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
est <- riskbutlerRadar::yuima.qmle(data = log(data), delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
est <- riskbutlerRadar::yuima.qmle(data = log(data), delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
est <- riskbutlerRadar::yuima.qmle(data = log(data), delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
est <- riskbutlerRadar::yuima.qmle(data = log(data), delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 2
qmle_step <- 2
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 1
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
data <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 252))
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
est <- riskbutlerRadar::yuima.qmle(data = log(data), delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
est <- riskbutlerRadar::yuima.qmle(data = log(data), delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 1}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 1}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 1}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 1}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 1}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 1}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^1", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": }}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 2
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 2
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 2
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 2
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 2
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1}, "lower": {"p1": -100,"p2": 0,"p3": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1}}')
win_less <- 2
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 2
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 2
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
ptm <- proc.time()
js <- jsonlite::fromJSON('{"start": {"p1": 1,"p2": 0.1,"p3": 0.1,"p4": 1}, "lower": {"p1": -100,"p2": 0,"p3": 0,"p4": 0}, "upper": {"p1": 100,"p2": 100,"p3": 1,"p4": 2}}')
win_less <- 0
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
proc.time() - ptm
est
data
sims <- simulate_all(data, T = 1/52, nsim = 1000, delta = 1/(365*24))
hist(sims)
sims <- simulate_all(data, T = 1/52, nsim = 10000, delta = 1/(365*24))
hist(sims)
sims <- simulate_all(data, T = 1/52, nsim = 2000, delta = 1/(365*24))
hist(sims)
ptm <- proc.time()
sims <- simulate_all(data, T = 1/52, nsim = 2000, delta = 1/(365*24))
proc.time() - ptm
ptm <- proc.time()
sims <- simulate_all(data, T = 1/52, nsim = 2000, delta = 1/(365*24))
proc.time() - ptm
ptm <- proc.time()
sims <- simulate_all(data, T = 1/52, nsim = 1000, delta = 1/(365*24))
proc.time() - ptm
ptm <- proc.time()
sims <- simulate_all(data, T = 1/52, nsim = 1000, delta = 1/(365*24))
proc.time() - ptm
ptm <- proc.time()
sims <- simulate_all(data, T = 1/52, nsim = 1000, delta = 1/(365*24))
proc.time() - ptm
win_less <- 0  # For 3 estimations choose e.g. w=4 and step=2, for 4 estimations choose e.g. w=6 and step=2 => default is one single estimation
qmle_step <- 1
est <- riskbutlerRadar::yuima.qmle.seq(data = log(data), window = (length(data) - win_less), step = qmle_step, delta = 1/(365*24), drift = "p1 * (p2 - x)", diffusion = "p3 * x^p4", hurst = 0.5, solve.variable = "x", method="L-BFGS-B",  start = js$start, lower = js$lower, upper = js$upper)
est
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 1000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i]))))
proc.time() - ptm
hist(sims)
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 1000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i])))
proc.time() - ptm
hist(sims)
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 1000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i])))
proc.time() - ptm
hist(sims)
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 1000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i])))
proc.time() - ptm
hist(sims)
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 10000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i])))
proc.time() - ptm
hist(sims)
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 10000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i])))
proc.time() - ptm
hist(sims)
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 10000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i])))
proc.time() - ptm
hist(sims)
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 10000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i])))
proc.time() - ptm
hist(sims)
ptm <- proc.time()
coef_i <- win_less/qmle_step + 1
xinit <- data[length(data)]
sims <- exp(riskbutlerRadar::eulerOne(xinit = log(xinit), Terminal = 1/52, nsim = 10000, parameter = list(p1 =est$coef$p1[coef_i], p2 = est$coef$p2[coef_i], p3 = est$coef$p3[coef_i], p4 = est$coef$p4[coef_i])))
proc.time() - ptm
hist(sims)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
aiUpdown()
aiUpdown()
aiUpdown()
aiUpdown()
a <- proc.time(); aiUpdown(); proc.time() - a
a <- proc.time(); aiUpdown(); proc.time() - a
a <- proc.time(); aiUpdown(); proc.time() - a
a <- proc.time(); aiUpdown(); proc.time() - a
