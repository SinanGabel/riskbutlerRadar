dd$est == 0
missing(dd$est)
typeof(dd)
typeof(dd$name)
dd$name == ""
dd <- sqlite.sql(url = "/home/local/sql/rdata.db", stmt = "select * from fx where name = \"DKKUrSD\" order by date desc limit 1")
View(dd)
nrow(dd)
dd <- sqlite.sql(url = "/home/local/sql/rdata.db", stmt = "select * from fx where name = \"DKKUSD\" order by date desc limit 1")
nrow(dd)
dd$date
dd$est
jsonlite::fromJSON(dd$est)
json <- jsonlite::fromJSON(dd$est)
json
json$time
as.POSIXct(json$time)
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
recalculate <- TRUE
db <- "/home/local/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
up <- json$up
down <- json$down
xinit <- json$price
recalculate <- FALSE
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- json(paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}'))
sqlite.sql(url = db, stmt = paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", ', value, ')' ), sep = "")
}
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", symbol ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
aiUpdown()
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
recalculate <- TRUE
db <- "/home/local/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
up <- json$up
down <- json$down
xinit <- json$price
recalculate <- FALSE
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- \"json(paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}'))\"
sqlite.sql(url = db, stmt = paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", ', value, ')' ), sep = "")
}
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", symbol ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
recalculate <- TRUE
db <- "/home/local/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
up <- json$up
down <- json$down
xinit <- json$price
recalculate <- FALSE
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}')
sqlite.sql(url = db, stmt = paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", json(', value, '))' ), sep = "")
}
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", symbol ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
aiUpdown()
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
recalculate <- TRUE
db <- "/home/local/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
up <- json$up
down <- json$down
xinit <- json$price
recalculate <- FALSE
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}')
sqlite.sql(url = db, stmt = paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", json(', value, '))', sep = ""))
}
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", symbol ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
aiUpdown()
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
recalculate <- TRUE
db <- "/home/local/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
up <- json$up
down <- json$down
xinit <- json$price
recalculate <- FALSE
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}', sep = "")
sqlite.sql(url = db, stmt = paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", json("', value, '"))', sep = ""))
}
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", symbol ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX curr
aiUpdown()
aa <- paste("DKK","GBP",sep="")
aa
db <- "/home/local/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = ', aa, ' order by date desc limit 1', sep = ""))
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', aa, '" order by date desc limit 1', sep = ""))
sql
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', "USDEUR", '" order by date desc limit 1', sep = ""))
sql
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', "DKKUSD", '" order by date desc limit 1', sep = ""))
sql
dt <- Sys.time()
value <- paste('{"symbol": "',  "DKKEUR", '", "up": ', 0.00153878947702521, ', "down": ', 0.00103293328132921 , ', "time": "', dt, '", "price": ', 123.456, '}', sep = "")
value
db
sqlite.sql(url = db, stmt = paste('insert into fx (name, date, est) values("', "DKKEUR", '", "', dt, '", json("', value, '"))', sep = ""))
paste('insert into fx (name, date, est) values("', "DKKEUR", '", "', dt, '", json("', value, '"))', sep = "")
paste('insert into fx (name, date, est) values("', "DKKEUR", '", "', dt, '", json(', value, '))', sep = "")
paste('insert into fx (name, date, est) values("', "DKKEUR", '", "', dt, '", json(\'', value, '\'))', sep = "")
bb <- paste('insert into fx (name, date, est) values("', "DKKEUR", '", "', dt, '", json(\'', value, '\'))', sep = "")
bb
sqlite.sql(url = db, stmt = bb)
sqlite.sql(url = db, stmt = "select * from fx")
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
recalculate <- TRUE
db <- "/home/local/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
up <- json$up
down <- json$down
xinit <- json$price
recalculate <- FALSE
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}', sep = "")
stmt <- paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", json(\'', value, '\'))', sep = "")
sqlite.sql(url = db, stmt = stmt)
}
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", symbol ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
aiUpdown()
aiUpdown()
ptm <- proc.time()
aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}'))
proc.time() - ptm
ptm <- proc.time()
aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}'))
proc.time() - ptm
sqlite.sql(url = db, stmt = "select * from fx")
ptm <- proc.time()
aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}'))
proc.time() - ptm
ptm <- proc.time()
aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}'))
proc.time() - ptm
sqlite.sql(url = db, stmt = "select * from fx")
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "EUR", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "EUR", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "DKK"}, "base_currency": "EUR", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
library(riskbutlerRadar)
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "SEK", frequency = "hour", limit = 100))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "SEK", frequency = "hour", limit = 100))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "SEK", frequency = "hour", limit = 100))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "NOK", frequency = "hour", limit = 100))
proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
library(riskbutlerRadar)
?sd
library(riskbutlerRadar)
library(riskbutlerRadar)
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "JPY", "date": "2017-12-10"}}')); proc.time() - ptm
