up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(up * 100, digits = 2), "percent and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
# aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "SEK"}, "base_currency": "NOK", "date": "2017-12-10"}}')); proc.time() - ptm
#' Return forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiFX <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "info@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(result)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(abs(up) * 100, digits = 2), "percent and the risk of loss is", format(abs(down) * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
# aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "SEK"}, "base_currency": "NOK", "date": "2017-12-10"}}')); proc.time() - ptm
#' Return forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiFX <- function(result) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "info@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(result)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(abs(up) * 100, digits = 2), "percent and the risk of loss is", format(abs(down) * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000. The actual profit or loss can be higher than estimated.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
# aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "SEK"}, "base_currency": "NOK", "date": "2017-12-10"}}')); proc.time() - ptm
.libPaths( c( "~/R/userlib", .libPaths()) )
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "SEK"}, "base_currency": "NOK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "NOK"}, "base_currency": "SEK", "date": "2017-12-10"}}')); proc.time() - ptm
#' Forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' Todo: use cron to pre-generate model parameter estimations, always use latest estimations as start values
#'
#' @param json parameters data from api.ai
#' @return list
#' @export
#'
aiCalc <- function(json) {
if (missing(json)) {
json <- jsonlite::fromJSON('{"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}')
}
api <- json
recalculate <- TRUE
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
symbol <- paste(base_currency, currency, sep = "")
if (base_currency == currency) {
return(list(up = 0, down = 0, xinit = 1, symbol = symbol))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
db <- "/var/sql/rdata.db"
sql <- sqlite.sql(url = db, stmt = paste('select * from fx where name = "', symbol, '" order by date desc limit 1', sep = ""))
if (nrow(sql) > 0) {
json <- jsonlite::fromJSON(sql$est)
# Only recalculate if at least one hour has passed
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
xinit <- json$price
up <- json$up
down <- json$down
recalculate <- FALSE
}
}
}
# remove in production, for test only
#recalculate <- TRUE
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta <- 1/(365*24)
} else {
delta <- 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 1)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
dt <- Sys.time()
value <- paste('{"symbol": "',  symbol, '", "up": ', up, ', "down": ', down , ', "time": "', dt, '", "price": ', xinit, '}', sep = "")
stmt <- paste('insert into fx (name, date, est) values("', symbol, '", "', dt, '", json(\'', value, '\'))', sep = "")
sqlite.sql(url = db, stmt = stmt)
}
# result
return(list(up = up, down = down, xinit = xinit, symbol = symbol))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiCalc(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiCalc()
# proc.time() - ptm
# aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "USD", "date": "2017-12-10"}}'))
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
aiCalc()
library(riskbutlerRadar)
aiCalc()
#' Return forecast of chance of profit and risk of loss for api.ai (this) updown financial activity agent
#'
#' @param result list of data from api.ai
#' @return list
#' @export
#'
aiFX <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"risk_type": "fx", "activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
base_currency <- api$base_currency
currency <- api$amount_currency$currency
info <- "info@riskbutler.com"
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency", base_currency, " and activity currency", currency, " are the same.", info))
} else {
calc <- aiCalc(api)
# Export
up <- calc$up
down <- calc$down
# Import and buy-side of trade or invest will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import" | api$activity_financial == "invest" | api$activity_financial == "trade") {
tmp <- calc$up
up <- calc$down
down <- tmp
if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
}
}
txt <- jsonlite::unbox(paste(txt_ext, "Due to foreign exchange changes, the 30 day chance of profit is", format(abs(up) * 100, digits = 2), "percent and the risk of loss is", format(abs(down) * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest foreign exchange price is", base_currency, format(calc$xinit, digits = 4), "=", currency, "1.0000. The actual profit or loss can be higher than estimated.", info))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX currently, and risk time horizon 1 calendar week (7 days), data is hourly, 10000 simulations, quantiles are 1 and 99 percent, market data window is 252
# Call from api.ai is something like
# aiFX(id = "8c71919d-ebb6-467e-866f-0e05509afdde", timestamp = "2017-06-15T13:33:17.691Z", lang = "en", result = result, status = status, sessionId = "somerandomthing")
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time()
# aiFX()
# proc.time() - ptm
# aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
#' activity_financial export, import, trade or invest (default export, string)
#' activity date (default now + 7 calendar days, date format "2017-09-10")
aiFX()
aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}'));
aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "NOK", "date": "2017-12-10"}}'));
aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "NOK", "date": "2017-12-10"}, "something": "else"}'));
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100, host = "localhost"))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100, host = "app:MGIxM2Jk@localhost"))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100, host = "localhost:5984"))
proc.time() - ptm
#' Gets latest available (our sources) univariate financial market data
#'
#' FX: Always expressed as the value in base currency (this may not follow trading convention)
#'
#' ToDo: enable currency to take a list of currencies: c("USD","GBP",...), and to take any hour during day for daily data
#'
#' @param request list()
#' @return vector of double (numeric)
#' @export
#'
getData <- function(request = list(class = "FX", base_currency = "EUR", currency = "USD", frequency = "day", limit = 100, host = "http://localhost")) {
if (request$class == "FX") {
if (request$base_currency == request$currency) {
return(rep.int(1, request$limit))
}
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
fields <- c(paste("new.", request$base_currency, sep=""), paste("new.", request$currency, sep=""))
if (request$frequency == "day") {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour", "date.3" = 18)
} else {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour")
}
body <- list(selector = sel, fields = fields, limit = request$limit, sort = jsonlite::fromJSON('[{"_id": "desc"}]'))
url <- paste("request$host", "/fx1/_find", sep = "")
r <- httr::POST(url, body = body, encode = "json")
## . Transform data
rates <- jsonlite::fromJSON(rawToChar(r$content), flatten = TRUE)
xdata <- rev(rates$docs[,1]/rates$docs[,2])
}
return(xdata)
}
#
# ptm <- proc.time()
# dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100))
# proc.time() - ptm
#
# plot(dd, type="b")
#' Gets latest available (our sources) univariate financial market data
#'
#' FX: Always expressed as the value in base currency (this may not follow trading convention)
#'
#' ToDo: enable currency to take a list of currencies: c("USD","GBP",...), and to take any hour during day for daily data
#'
#' @param request list()
#' @return vector of double (numeric)
#' @export
#'
getData <- function(request = list(class = "FX", base_currency = "EUR", currency = "USD", frequency = "day", limit = 100, host = "http://localhost:5984")) {
if (request$class == "FX") {
if (request$base_currency == request$currency) {
return(rep.int(1, request$limit))
}
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
fields <- c(paste("new.", request$base_currency, sep=""), paste("new.", request$currency, sep=""))
if (request$frequency == "day") {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour", "date.3" = 18)
} else {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour")
}
body <- list(selector = sel, fields = fields, limit = request$limit, sort = jsonlite::fromJSON('[{"_id": "desc"}]'))
url <- paste("request$host", "/fx1/_find", sep = "")
r <- httr::POST(url, body = body, encode = "json")
## . Transform data
rates <- jsonlite::fromJSON(rawToChar(r$content), flatten = TRUE)
xdata <- rev(rates$docs[,1]/rates$docs[,2])
}
return(xdata)
}
#
# ptm <- proc.time()
# dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100))
# proc.time() - ptm
#
# plot(dd, type="b")
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "DKK", frequency = "hour")
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "DKK", frequency = "hour"))
proc.time() - ptm
#' Gets latest available (our sources) univariate financial market data
#'
#' FX: Always expressed as the value in base currency (this may not follow trading convention)
#'
#' ToDo: enable currency to take a list of currencies: c("USD","GBP",...), and to take any hour during day for daily data
#'
#' @param request list()
#' @return vector of double (numeric)
#' @export
#'
getData <- function(request = list(class = "FX", base_currency = "EUR", currency = "USD", frequency = "day", limit = 100, host = "http://localhost:5984")) {
if (request$class == "FX") {
if (request$base_currency == request$currency) {
return(rep.int(1, request$limit))
}
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
fields <- c(paste("new.", request$base_currency, sep=""), paste("new.", request$currency, sep=""))
if (request$frequency == "day") {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour", "date.3" = 18)
} else {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour")
}
body <- list(selector = sel, fields = fields, limit = request$limit, sort = jsonlite::fromJSON('[{"_id": "desc"}]'))
url <- paste(request$host, "/fx1/_find", sep = "")
r <- httr::POST(url, body = body, encode = "json")
## . Transform data
rates <- jsonlite::fromJSON(rawToChar(r$content), flatten = TRUE)
xdata <- rev(rates$docs[,1]/rates$docs[,2])
}
return(xdata)
}
#
# ptm <- proc.time()
# dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100))
# proc.time() - ptm
#
# plot(dd, type="b")
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "DKK", frequency = "hour"))
proc.time() - ptm
paste("http://localhost:5984", "/fx1/_find", sep = "")
#' Gets latest available (our sources) univariate financial market data
#'
#' FX: Always expressed as the value in base currency (this may not follow trading convention)
#'
#' ToDo: enable currency to take a list of currencies: c("USD","GBP",...), and to take any hour during day for daily data
#'
#' @param request list()
#' @return vector of double (numeric)
#' @export
#'
getData <- function(request = list(class = "FX", base_currency = "EUR", currency = "USD", frequency = "day", limit = 100, host = "http://localhost:5984")) {
if (request$class == "FX") {
if (request$base_currency == request$currency) {
return(rep.int(1, request$limit))
}
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
fields <- c(paste("new.", request$base_currency, sep=""), paste("new.", request$currency, sep=""))
if (request$frequency == "day") {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour", "date.3" = 18)
} else {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour")
}
body <- list(selector = sel, fields = fields, limit = request$limit, sort = jsonlite::fromJSON('[{"_id": "desc"}]'))
r <- httr::POST(paste(request$host, "/fx1/_find", sep = ""), body = body, encode = "json")
## . Transform data
rates <- jsonlite::fromJSON(rawToChar(r$content), flatten = TRUE)
xdata <- rev(rates$docs[,1]/rates$docs[,2])
}
return(xdata)
}
#
# ptm <- proc.time()
# dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100))
# proc.time() - ptm
#
# plot(dd, type="b")
#' Gets latest available (our sources) univariate financial market data
#'
#' FX: Always expressed as the value in base currency (this may not follow trading convention)
#'
#' ToDo: enable currency to take a list of currencies: c("USD","GBP",...), and to take any hour during day for daily data
#'
#' @param request list()
#' @return vector of double (numeric)
#' @export
#'
getData <- function(request = list(class = "FX", base_currency = "EUR", currency = "USD", frequency = "day", limit = 100, host = "http://localhost:5984")) {
if (request$class == "FX") {
if (request$base_currency == request$currency) {
return(rep.int(1, request$limit))
}
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
fields <- c(paste("new.", request$base_currency, sep=""), paste("new.", request$currency, sep=""))
if (request$frequency == "day") {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour", "date.3" = 18)
} else {
sel <- list("_id" = list("$gt" = "a"), "type" = "hour")
}
body <- list(selector = sel, fields = fields, limit = request$limit, sort = jsonlite::fromJSON('[{"_id": "desc"}]'))
r <- httr::POST(paste(request$host, "/fx1/_find", sep = ""), body = body, encode = "json")
## . Transform data
rates <- jsonlite::fromJSON(rawToChar(r$content), flatten = TRUE)
xdata <- rev(rates$docs[,1]/rates$docs[,2])
}
return(xdata)
}
#
# ptm <- proc.time()
# dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100))
# proc.time() - ptm
#
# plot(dd, type="b")
getData()
ls
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100))
proc.time() - ptm
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "hour", limit = 100, host = "http://localhost:5984"))
proc.time() - ptm
dd
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 100, host = "http://localhost:5984"))
proc.time() - ptm
dd
ptm <- proc.time()
dd <- getData(request = list(class = "FX", base_currency = "USD", currency = "EUR", frequency = "day", limit = 100, host = "https://riskbutler.net"))
proc.time() - ptm
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
aiCalc()
aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "HKD", "date": "2017-12-10"}}'))
library(riskbutlerRadar)
library(riskbutlerRadar)
aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "HKD", "date": "2017-12-10"}}'))
aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "HKD", "date": "2017-12-10"}}'))
aiCalc()
library(riskbutlerRadar)
library(riskbutlerRadar)
ptm <- proc.time(); aiCalc(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
# ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "HKD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiFX(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "HKD", "date": "2017-12-10"}}')); proc.time() - ptm
