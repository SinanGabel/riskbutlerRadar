summary(gbp/dkk1)
q11 <- quantile(dkkgbp,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q12 <- quantile(gbp/dkk1,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
# Average of three models
set.seed(123)
dkkgbp <- sumall(USDDKK_USDGBP)
hist(dkkgbp)
set.seed(123)
gbp <- sumall(USDGBP)
hist(gbp)
summary(dkkgbp)
summary(gbp/dkk2)
q21 <- quantile(dkkgbp,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q22 <- quantile(gbp/dkk2,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q11
q12
q21
q22
# Relative difference in percent
((q11 - q12)/q12)*100
((q21 - q22)/q22)*100
cur <- "SEK"
USDDKK_USDGBP <- getData(request = list(class = "FX", base_currency = "DKK", currency = cur, frequency = "day", limit = limit))
USDGBP <- getData(request = list(class = "FX", base_currency = "USD", currency = cur, frequency = "day", limit = limit))
# One model at a time
set.seed(123)
dkkgbp <- simulate_all(USDDKK_USDGBP, model = md, T = T, nsim = nsim, delta = 1/365, estimations = 5)
hist(dkkgbp)
set.seed(123)
gbp <- simulate_all(USDGBP, model = md, T = T, nsim = nsim, delta = 1/365, estimations = 5)
hist(gbp)
summary(dkkgbp)
summary(gbp/dkk1)
q11 <- quantile(dkkgbp,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q12 <- quantile(gbp/dkk1,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
# Average of three models
set.seed(123)
dkkgbp <- sumall(USDDKK_USDGBP)
hist(dkkgbp)
set.seed(123)
gbp <- sumall(USDGBP)
hist(gbp)
summary(dkkgbp)
summary(gbp/dkk2)
q21 <- quantile(dkkgbp,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q22 <- quantile(gbp/dkk2,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q11
q12
q21
q22
# Relative difference in percent
((q11 - q12)/q12)*100
((q21 - q22)/q22)*100
hist(dkkgbp)
hist(gbp)
T <- 1/52
nsim <- 25000
sumall <- function(data) {
(sort(simulate_all(data, model = "you3",  T = T, nsim = nsim, delta = 1/365, estimations = 5)) +
sort(simulate_all(data, model = "yckls", T = T, nsim = nsim, delta = 1/365, estimations = 5)) +
sort(simulate_all(data, model = "yhdf",  T = T, nsim = nsim, delta = 1/365, estimations = 5)))/3
}
limit <- 100
USDDKK <- getData(request = list(class = "FX", base_currency = "USD", currency = "DKK", frequency = "day", limit = limit))
md <- "yckls"
set.seed(123)
dkk1 <- simulate_all(USDDKK, model = md, T = T, nsim = nsim, delta = 1/365, estimations = 5)
set.seed(123)
dkk2 <- sumall(USDDKK)
# GBP, EUR, XAU, SEK, NOK, CHF, JPY, AUD
# Note: USD is precise because data is in USD base
cur <- "SEK"
USDDKK_USDGBP <- getData(request = list(class = "FX", base_currency = "DKK", currency = cur, frequency = "day", limit = limit))
USDGBP <- getData(request = list(class = "FX", base_currency = "USD", currency = cur, frequency = "day", limit = limit))
# One model at a time
set.seed(123)
dkkgbp1 <- simulate_all(USDDKK_USDGBP, model = md, T = T, nsim = nsim, delta = 1/365, estimations = 5)
hist(dkkgbp)
set.seed(123)
gbp1 <- simulate_all(USDGBP, model = md, T = T, nsim = nsim, delta = 1/365, estimations = 5)
hist(gbp1/dkk1)
summary(dkkgbp1)
summary(gbp1/dkk1)
q11 <- quantile(dkkgbp1,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q12 <- quantile(gbp1/dkk1,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
# Average of three models
set.seed(123)
dkkgbp2 <- sumall(USDDKK_USDGBP)
hist(dkkgbp2)
set.seed(123)
gbp2 <- sumall(USDGBP)
hist(gbp2/dkk2)
summary(dkkgbp2)
summary(gbp2/dkk2)
q21 <- quantile(dkkgbp2,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q22 <- quantile(gbp2/dkk2,  probs = c(0.1, 0.5, 1, 2, 5, 10, 50, 90, 95, 98, 99, 99.5, 99.9)/100)
q11
q12
q21
q22
# Relative difference in percent
((q11 - q12)/q12)*100
((q21 - q22)/q22)*100
hist(dkkgbp1)
hist(gbp1/dkk1)
?range
range(dkkgbp1)
range(gbp1/dkk1)
range(dkkgbp2)
range(gbp2/dkk2)
USDDKK_USDGBP[limit]
USDGBP[limit]/USDDKK[limit]
aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}'))
aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}'))
ptm <- proc.time()
aiUpdown()
proc.time() - ptm
ptm <- proc.time()
aiUpdown()
proc.time() - ptm
ptm <- proc.time()
aiUpdown()
proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "NOK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency and activity currency are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
## Save results to db for next user
## Return forecast info to api.ai
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", paste(base_currency, currency, sep="") ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# Save result for later: DKKUSD.txt => does file append or overwrite by default? Use sqlite3 instead, and/or pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
conn <- file(paste("./data/", base_currency, currency, ".txt", sep=""))
writeLines( txt, conn)
close(conn)
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
#' Note: only FX
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency and activity currency are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
## Save results to db for next user
## Return forecast info to api.ai
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", paste(base_currency, currency, sep="") ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# Save result for later: DKKUSD.txt => does file append or overwrite by default? Use sqlite3 instead, and/or pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
# note: files are overwrite
conn <- file(paste("./data/", base_currency, currency, ".txt", sep=""))
writeLines( paste('{"symbol": ,',  base_currency, currency, ', "up": ', up, ', "down": ', down , ', "time": ', Sys.time(), ', "price": ', xinit, '}', sep = ""), conn)
close(conn)
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
?file.exists
file.exists("./data/USDEUR.txt")
file.exists("./data/USDEUR2.txt")
?readLines
conn <- file("./data/USDEUR.txt")
readLines(conn)
close(conn)
readLines("./data/USDEUR.txt")
json <- readLines("./data/USDEUR.txt")
json
dd <- fromJSON(json)
dd <- jsonlite::fromJSON(json)
json <- readLines("./data/USDEUR.txt")
dd <- jsonlite::fromJSON(json)
dd
dd$time
dd$time > Sys.time()
dd$time < Sys.time()
?calculate
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency and activity currency are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
data_read <- FALSE
recalculate <- FALSE
if (file.exists(paste("./data/", base_currency, currency, ".json", sep = ""))) {
json <- readLines(paste("./data/", base_currency, currency, ".json", sep=""))
json <- jsonlite::fromJSON(json)
if ((json$time + 3600) < Sys.time()) {
recalculate <- TRUE
} else {
up <- json$up
down <- json$down
xinit <- json$price
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
}
## Save results to db for next user
## Return forecast info to api.ai
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", paste(base_currency, currency, sep="") ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# Save result for later: DKKUSD.txt => does file append or overwrite by default? Use sqlite3 instead, and/or pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
# note: files are overwrite
if (data_read == FALSE) {
conn <- file(paste("./data/", base_currency, currency, ".json", sep=""))
writeLines( paste('{"symbol": "',  base_currency, currency, '", "up": ', up, ', "down": ', down , ', "time": "', Sys.time(), '", "price": ', xinit, '}', sep = ""), conn)
close(conn)
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency and activity currency are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
recalculate <- TRUE
if (file.exists(paste("./data/", base_currency, currency, ".json", sep = ""))) {
json <- readLines(paste("./data/", base_currency, currency, ".json", sep=""))
json <- jsonlite::fromJSON(json)
if ((json$time + 3600) > Sys.time()) {
up <- json$up
down <- json$down
xinit <- json$price
recalculate <- FALSE
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use sqlite3 instead, and/or pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
# note: files are overwrite
conn <- file(paste("./data/", base_currency, currency, ".json", sep=""))
writeLines( paste('{"symbol": "',  base_currency, currency, '", "up": ', up, ', "down": ', down , ', "time": "', Sys.time(), '", "price": ', xinit, '}', sep = ""), conn)
close(conn)
}
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", paste(base_currency, currency, sep="") ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
as.POSIXct("2017-06-22 21:59:46")
as.POSIXct("2017-06-22 21:59:46") + 3600
as.POSIXct("2017-06-22 21:59:46") + 3600 < Sys.time()
as.POSIXct("2017-06-22 21:59:46") + 3600 > Sys.time()
aiUpdown <- function(result, ...) {
if (missing(result)) {
result <- jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "GBP"}, "base_currency": "DKK", "date": "2017-12-10"}}')
}
api <- result$parameters
# temporary
base_currency <- api$base_currency
currency <- api$amount_currency$currency
if (base_currency == currency) {
txt <- jsonlite::unbox(paste("There is no foreign exchange risk on your", api$activity_financial, "activity because the base currency and activity currency are the same. To understand how this was calculated please go to riskbutler.com."))
} else {
## . Check if results are already calculated and stored, else make new simulations; check if result and all parameters are there and correct;
recalculate <- TRUE
if (file.exists(paste("./data/", base_currency, currency, ".json", sep = ""))) {
json <- readLines(paste("./data/", base_currency, currency, ".json", sep=""))
json <- jsonlite::fromJSON(json)
if ((as.POSIXct(json$time) + 3600) > Sys.time()) {
up <- json$up
down <- json$down
xinit <- json$price
recalculate <- FALSE
}
}
if (recalculate == TRUE) {
## . Get market data
# tip: preload httr in opencpu
# tip: add date to fields to see actual data time stamps, and add verbose() to the POST parameters for more info on the call
# todo: filter weekend data out; check if a result is returned; test with lasso if model 3 is appropriate or perhaps a simpler model can be used e.g. where p4=1 <=> Brennan 92
freq <- "day"
xdata <- riskbutlerRadar::getData(request = list(class = "FX", base_currency = base_currency, currency = currency, frequency = freq, limit = 100))
## . Estimate parameters
if (freq == "hour") {
delta = 1/(365*24)
} else {
delta = 1/365
}
nsim <- 10000
sims <- riskbutlerRadar::simulate_all(xdata, model = "you3", T = 1/12, nsim = nsim, delta = delta, estimations = 2)
xinit <- xdata[length(xdata)]
## Make wanted statistics
sims <- sort(sims)
q <- 0.01
up <- (sims[round((1-q) * nsim)] - xinit)/xinit  # q * 100 percent chance of up = up, or more up
down <- abs((sims[round(q * nsim)] - xinit)/xinit)    # q * 100 percent chance of down = down, or further down
# Save result for later
# Use sqlite3 instead, and/or pre-calculated estimations with latest market value saved <= setup cron to make these calculations every hour
# If no result, then call opencpu directly and present result as text
# note: files are overwrite
conn <- file(paste("./data/", base_currency, currency, ".json", sep=""))
writeLines( paste('{"symbol": "',  base_currency, currency, '", "up": ', up, ', "down": ', down , ', "time": "', Sys.time(), '", "price": ', xinit, '}', sep = ""), conn)
close(conn)
}
# Import and buy-side of trade will loose on FX changes if rate goes up, and vice versa for sell-side
txt_ext <- ""
if (api$activity_financial == "import") {
tmp <- up
up <- down
down <- tmp
} else if (api$activity_financial == "invest" | api$activity_financial == "trade") {
txt_ext <- paste("For the buy-side of the", api$activity_financial, "activity: ")
tmp <- up
up <- down
down <- tmp
}
txt <- jsonlite::unbox(paste(txt_ext, "The 30 day chance of profit is", format(up * 100, digits = 2), "percent, and the risk of loss is", format(down * 100, digits = 2), "percent of the", api$activity_financial, "activity amount. The latest", paste(base_currency, currency, sep="") ,"exchange rate is", format(xinit, digits = 4),"(info: sinan.gabel@riskbutler.com)."))
}
# result
return(list(speech = txt, displayText = txt, source = jsonlite::unbox("riskbutler.net")))
}
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "USD", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "JPY"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "invest", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "trade", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "export", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "export", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
library(riskbutlerRadar)
library(riskbutlerRadar)
library(riskbutlerRadar)
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "DKK", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "GBP", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "EUR"}, "base_currency": "GBP", "date": "2017-12-10"}}')); proc.time() - ptm
ptm <- proc.time(); aiUpdown(jsonlite::fromJSON('{"parameters": {"activity_financial": "import", "amount_currency": {"amount": 100, "currency": "USD"}, "base_currency": "GBP", "date": "2017-12-10"}}')); proc.time() - ptm
