r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ...)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
rm(X)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X <- yuima::simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
library("yuima")
library("yuima")
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima::simulate(yuima::setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, ...) {
ymod <- yuima::setModel(drift, diffusion, xinit)
ysam <- yuima::setSampling(Terminal, n)
if (nsim == 1) {
s <- yuima::simulate(ymod, ysam, ...)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, ...)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, ...)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima::simulate(yuima::setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), yuima::setSampling(Terminal = 1, n = 10))
X
X <- yuima::simulate(yuima::setModel(drift = "mu * x", diffusion = "sigma * x"), xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), yuima::setSampling(Terminal = 1, n = 10))
X
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, true.parameter, ...) {
ymod <- yuima::setModel(drift, diffusion)
ysam <- yuima::setSampling(Terminal, n)
if (nsim == 1) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
rm(X, yuima.simulate
)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit initial value vector of state variables (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @param true.parameter named list of parameters.
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, true.parameter = list()) {
ymod <- yuima::setModel(drift, diffusion)
ysam <- yuima::setSampling(Terminal, n)
if (nsim == 1) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit, true.parameter)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit initial value vector of state variables (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @param parameter named list of parameters (name true.parameter in yuima).
#' @return simulations
#' @export
#'
#'
#'yuima.simulate <- function(object, sumsim = TRUE, nsim = 1, ...) {
yuima.simulate <- function(sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 1, parameter = list()) {
ymod <- yuima::setModel(drift, diffusion)
ysam <- yuima::setSampling(Terminal, n)
if (nsim == 1) {
s <- yuima::simulate(ymod, ysam, xinit = xinit, true.parameter = parameter)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit = xinit, true.parameter = parameter)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
s <- yuima::simulate(ymod, ysam, xinit = xinit, true.parameter = parameter)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
# X <- yuima.simulate(setModel(drift = "mu * x", diffusion = "sigma * x"), sumsim = TRUE, nsim = 100, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), sampling = setSampling(Terminal = 1, n = 10))
View(yuima.simulate)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, true.parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
mean(X)
sd(X)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
mean(X)
sd(X)
library(radar)
library(radar)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
mean(X)
X
library(radar)
library(radar)
library(radar)
library(radar)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
stats::sd(X)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 150)
X
library(radar)
library(radar)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 150)
X
library(radar)
library(radar)
rm(X)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 10, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 150)
X
library(radar)
library(radar)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 10, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 177)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 10, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 10, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 123)+plot(X)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 10, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 123)+plot(X)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 10, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 123) + plot(X)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 10, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 56)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
stats::sd(X)
mean(X)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 123)
plot(X)
mean(X)
length(X)
sd(X)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
expect_that( abs(stats::sd(X) - 353.9682) < 1e-5, is_true() )
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(radar)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
expect_that( abs(stats::sd(X) - 353.9682) < 1e-5, is_true() )
expect_that( abs(mean(X) - 10541.72) < 1e-5, is_true() )
expect_that( length(X) == 11, is_true() )
X
length(X)
mean(X)
abs(mean(X) - 10541.72) < 1e-5
abs(mean(X) - 10541.72)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
abs(mean(X) - 10541.72) < 1e-5
abs(mean(X) - 10541.72)
abs(mean(X) - 10541.72) < 1e-3
abs(mean(X) - 10541.72) < 1e-2
expect_that( abs(stats::sd(X) - 353.9682) < 1e-2, is_true() )
is_true()
expect_true( abs(stats::sd(X) - 353.9682) < 1e-2
)
X
abs(stats::sd(X) - 353.9682)
abs(stats::sd(X) - 353.9682) < 1e-2
expect_true( abs(stats::sd(X) - 353.9682) < 1e-2)
expect_true( abs(stats::sd(X) - 353.9682) < 1e-99)
expect_true( abs(stats::sd(X) - 353.9682) < 1e-2)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
expect_true( abs(stats::sd(X) - 353.9682) < 1e-2)
expect_true( abs(mean(X) - 10541.72) < 1e-2)
expect_true( length(X) == 11)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 123)
X
mean(X)
stats:sd(X)
stats::sd(X)
set.seed(123)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 123)
expect_true( abs(stats::sd(X) - 4.305557) < 1e-2)
expect_true( abs(mean(X) - 107.0228) < 1e-2)
expect_true( length(X) == 124)
abs(stats::sd(X) - 4.305557)
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), delta = 1, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
summary(X)
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), delta = 1, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
summary(X)
X <- summary()
X <- summary(X)
X
X@coef
X@coef$Estimate
X@coef[Estimate]
X@coef["Estimate""]
<
>
;
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), delta = 1, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
X <- stats4::summary(X)
X
X
X@coef
rm(X)
rm(ar)
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), delta = 1, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
res <- stats4::summary(X)
res
res@coef
res <- as.data.frame(X@coef)
res
res <- stats4::summary(X)
res <- as.data.frame(X@coef)
res
rm(X)
rm(res,ar)
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(radar)
set.seed(123)
ar <- 100*exp(rnorm(100, mean=0, sd=0.10))
X <- yuima.qmle(data = log(ar), delta = 1, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
X
X@coef
X <- stats4::summary(X)
X
X@coef
X@coef["mu"]
X@coef["Estimate"]
X@coef$Estimate
X@coef$sigma
X <- as.data.frame(X@coef)
abs(X$Estimate[1] - 0.1041014143)
abs(X$Estimate[2] - 0.0002923041)
library(radar)
library(radar)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(radar)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
typeof(X)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
typeof(X)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(radar)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
#' An interface to the yuima::simulate function
#'
#' Multivariate models
#'
#' @param sumsim  sum simulations vertically (default TRUE)
#' @param nsim number of simulations (default 1)
#' @param drift  (e.g."mu * x")
#' @param diffusion  (e.g. "sigma * x")
#' @param xinit initial value vector of state variables (default 1)
#' @param Terminal (default 1)
#' @param n number of trading times (default 1)
#' @param parameter named list of parameters (name true.parameter in yuima).
#' @return simulations
#' @export
#'
#'
yuima.simulate <- function(setseed = FALSE, sumsim = TRUE, nsim = 1, drift, diffusion, xinit = 1, Terminal = 1, n = 100, parameter) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion)
ysam <- yuima::setSampling(Terminal = Terminal, n = n)
yobj <- yuima::setYuima(model = ymod, sampling = ysam)
if (nsim == 1) {
if (setseed == TRUE) {
set.seed(123)
}
s <- yuima::simulate(yobj, xinit = xinit, true.parameter = parameter)
return(s@data@original.data)
} else if (sumsim == TRUE) {
r <- c(0)
m <- nsim
for(i in 1:m) {
if (setseed == TRUE) {
set.seed(123)
}
s <- yuima::simulate(yobj, xinit = xinit, true.parameter = parameter)
t <- s@data@original.data
r <- r + t
}
return(r)
} else {
r <- c()
m <- nsim
for(i in 1:m) {
if (setseed == TRUE) {
set.seed(123)
}
s <- yuima::simulate(yobj, xinit = xinit, true.parameter = parameter)
t <- s@data@original.data
r <- cbind(r, t)
}
#avg <- apply(res, 1, mean)
#vol <-  apply(res, 1, sd)
return(r)
}
}
# library(radar)
# note: sumsim, nsim and n
# X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = TRUE, nsim = 100, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10, setseed=TRUE)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 1, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10, setseed=TRUE)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 3, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10, setseed=TRUE)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 3, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
library(radar)
library(radar)
library(radar)
library(radar)
library(radar)
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 3, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 3, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10, setseed = true)
X
X <- yuima.simulate(drift = "mu * x", diffusion = "sigma * x", sumsim = FALSE, nsim = 3, xinit = 100, parameter = list(mu = 0.1, sigma = 0.07), Terminal = 1, n = 10, setseed = TRUE)
X
library(radar)
library(radar)
library(radar)
