dat <- data[seq(i,i+w-1)]
r <- cbind(r, dat)
}
r
r
r <- c()
data <- x
w <- 100
step <- 10
library(foreach)
y1 <- 100*exp(rnorm(100, mean=0, sd=0.10))
y2 <- 100*exp(rnorm(100, mean=0, sd=0.10))
data <- list(x1 = y1, x2 = y2)
r <- c()
w <- 100
step <- 10
r <- foreach(i=seq(1,length(data)-w+step,step), .combine = cbind) %do% {
dat <- data[seq(i,i+w-1)]
r <- cbind(r, dat)
}
r <- foreach(i=seq(1,length(data)-w+step,step), .combine = cbind) %do% {
dat <- data[seq(i,i+w-1)]
r <- cbind(r, dat)
}
length(data)
zz <- toJSON(structure(list(y1,y2), .Names = c("x1","x2")))
zz
library(jsonlite)
zz <- toJSON(structure(list(y1,y2), .Names = c("x1","x2")))
zz
xdata <- fromJSON(zz)
xdata
length(xdata)
length(xdata[0])
xdata$x1
length(xdata$x1)
length(xdata[1,])
length(xdata[,2])
str(xdata)
head(xdata)
tail(xdata)
ncol(xdata)
NROW(xdata)
nrow(xdata)
NROW(xdata)
NCOL(xdata)
ncol(xdata)
data <- y1
r <- c()
w <- 100
step <- 10
r <- foreach(i=seq(1,length(data)-w+step,step), .combine = cbind) %do% {
dat <- data[seq(i,i+w-1)]
r <- cbind(r, dat)
}
r
r
str(r)
y1
seq(1,length(data)-w+step,step)
length(data)
y1 <- 100*exp(rnorm(200, mean=0, sd=0.10))
y2 <- 100*exp(rnorm(200, mean=0, sd=0.10))
data <- y1
r <- c()
w <- 100
step <- 10
r <- foreach(i=seq(1,length(data)-w+step,step), .combine = cbind) %do% {
dat <- data[seq(i,i+w-1)]
r <- cbind(r, dat)
}
r
y1 <- 100*exp(rnorm(200, mean=0, sd=0.10))
y2 <- 100*exp(rnorm(200, mean=0, sd=0.10))
data <- list(x1 = y1, x2 = y2)
data <- y1
r <- c()
w <- 100
step <- 10
r <- foreach(i=seq(1,length(data)-w+step,step), .combine = cbind) %do% {
dat <- data[seq(i,i+w-1)]
#r <- cbind(r, dat)
}
r
seq(1,length(data)-w+step,step)
y1
length(data)
library(yuima)
yuima.qmle.seq <- function(data, delta = 1/252, summary = TRUE, drift, diffusion, hurst = 0.5, solve.variable = "x", start, ...) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, state.variable = solve.variable)
# check foreach further: even, uneven indexes; vector or matrix etc.
#r <- c()
l <- seq(1, length(data) - w + step, step)
w <- 100
step <- 10
est = start
# %dopar% or %do%
r <- foreach(i=l, .combine = cbind) %do% {
dat <- data[seq(i,i+w-1)]
dat <- yuima::setData(dat, delta = delta)
yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
return(r)
}
ar <- 100*exp(rnorm(200, mean=0, sd=0.10))
ar
yuima.qmle(data = log(ar), delta = 1/(24*365), drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
library(radar)
library(foreach)
yuima.qmle(data = log(ar), delta = 1/(24*365), drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
yuima.qmle.seq(data = log(ar), delta = 1/(24*365), drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
xx <- yuima.qmle.seq(data = log(ar), delta = 1/(24*365), drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
xx
toJSON(xx)
yuima.qmle.seq(data = log(ar), delta = 1/(24*365), summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
yuima.qmle(data = log(ar), delta = 1/(24*365), summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
yuima.qmle(data = log(ar), delta = 1/(24*365), summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
xx <- yuima.qmle.seq(data = log(ar), delta = 1/(24*365), drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
xx
ar <- 100*exp(rnorm(252, mean=0.05, sd=0.10))
ar
yuima.qmle(data = log(ar), delta = 1/(24*365), drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = 0, sigma = 0), upper = list(mu = 0.50, sigma = 1))
plot(ar)
plot(ar,t=l)
?plot
plot(ar,type="l")
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 10, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 3, parameter = list(mu = 0.1, sigma = 0.07))
X
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 10, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 1, parameter = list(mu = 0.1, sigma = 0.07))
X
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 500, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 1, parameter = list(mu = 0.1, sigma = 0.07))
X
yuima.qmle(data = X, delta = 1/500, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = -10, sigma = 0), upper = list(mu = 10, sigma = 2))
yuima.qmle(data = X, delta = 1/500, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = -1, sigma = 0), upper = list(mu = 1, sigma = 1))
yuima.qmle(data = X, delta = 1/500, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
plot(X, type="l")
X <- yuima.simulate(setseed = FALSE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
plot(X, type="l")
yuima.qmle(data = X, delta = 1/500, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
yuima.qmle.seq(data = X, delta = 1/500, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
set.seed(123)
X <- yuima.qmle(data = X, delta = 1/500, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.10, sigma = 0.1), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
X
Xx
X
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
plot(X, type="l")
est <- yuima.qmle(data = X, delta = 1/500, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est@coef
as.list(est@coef)
est <- as.list(est@coef)
est
est$mu
est <- yuima.qmle.seq(data = X, delta = 1/500, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est[1]
est[1,]
mean(est[1,])
mean(est[2,])
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est$mu
est$sigma
abs(est$mu - 0.1556972)
abs(est$sigma - 0.06801812)
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
abs(mean(est[1,]) - 0.06801815)
mean(est[1,])
est
est@coef
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
abs(mean(est[1,]) - 0.06801815)
abs(mean(est[2,]) - 0.1201217)
library(radar)
library(radar)
install.packages(roxygen2)
install.packages("roxygen2")
library(radar)
install.packages(c("curl", "jsonlite", "lubridate", "radar"))
?foreach
??foreach
library(radar)
library(radar)
?%do%
??foreach
library(radar)
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(foreach)
library(radar)
# simulate
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
# estimate once
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
yuima.qmle.seq <- function(data, delta = 1/252, summary = TRUE, drift, diffusion, hurst = 0.5, solve.variable = "x", start, ...) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, state.variable = solve.variable)
# check foreach further: even, uneven indexes; vector or matrix etc.
w <- 100
step <- 10
l <- seq(1, length(data) - w + step, step)
est = start
# %dopar% or %do%
r <- foreach::foreach(i=l, .combine = cbind, .packages="foreach") foreach::`%do%` {
#r <- foreach::foreach(i=l, .combine = cbind) %do% {
dat <- data[seq(i,i+w-1)]
dat <- yuima::setData(dat, delta = delta)
yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
return(r)
}
??foreach
??%do%
?%do%
?`%do%`
vignette("nested")
?%foreach::do%
??%foreach::do%
??'%foreach::do%'
?"%foreach::do%"
??%foreach::do%
foreach::%do%
foreach::"%do%"
?namespace
??namespace
?roxygen2
??roxygen2
library(radar)
devtools::document()
library(radar)
library(radar)
search()
?foreach::%do%
??foreach::%do%
library(radar)
library(radar)
devtools::document()
library(radar)
library(radar)
devtools::document()
library(radar)
??i
library(radar)
library(radar)
library(radar)
library(radar)
i
yuima.qmle.seq <- function(data, delta = 1/252, summary = TRUE, drift, diffusion, hurst = 0.5, solve.variable = "x", start, ...) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, state.variable = solve.variable)
# check foreach further: even, uneven indexes; vector or matrix etc.
w <- 100
step <- 10
est = start
# %dopar% or %do%
#r <- foreach::foreach(i=l, .combine = cbind, .packages="foreach") %do% {
r <- foreach::foreach(i = seq(1, length(data) - w + step, step), .combine = cbind) %do% {
dat <- data[seq(i, i+w-1)]
dat <- yuima::setData(dat, delta = delta)
yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
return(r)
}
i
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
library(jsonlite)
toJSON(est)
est
as.list(est)
data.frame(est)
str(est)
est[1,]
est[2,]
est[,1]
est[,2]
est.result
est$result
NROWS(est)
NROW(est)
rownames(est)
columnnames(est)
colnames(est)
t(est)
toJSON(t(est))
toJSON(est
)
toJSON(est,dataframe="values")
toJSON(est,dataframe="columns")
toJSON(est,dataframe="rows")
toJSON(as.list(est))
est
toJSON(as.list(t(est))
)
as.pairlist(est)
as.dataframe(est)
as.data.frame(est)
as.data.frame(t(est)
)
t(est)
toJSON(t(est))
mtcars
jsoncars <- serializeJSON(mtcars)
jsoncars
View(est)
summary(est)
mlefilter(est)
summary(est)
res <- summary(est)
res
toJSON(list( coef = as.data.frame(est)))
toJSON(list( coef = as.data.frame(t(est)))
)
est
yuima.qmle.seq <- function(data, delta = 1/252, summary = TRUE, drift, diffusion, hurst = 0.5, solve.variable = "x", start, ...) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, state.variable = solve.variable)
# check foreach further: even, uneven indexes; vector or matrix etc.
w <- 100
step <- 10
est = start
# %dopar% or %do%
#r <- foreach::foreach(i=l, .combine = cbind, .packages="foreach") %do% {
r <- foreach::foreach(i = seq(1, length(data) - w + step, step), .combine = cbind) %do% {
dat <- data[seq(i, i+w-1)]
dat <- yuima::setData(dat, delta = delta)
yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
if (summary == TRUE)
return(toJSON(list( coef = as.data.frame(t(r)))))
else
return(r)
}
X
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
library(radar)
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
library(radar)
library(testthat)
library(stats4)
library(yuima)
library(DBI)
library(RSQLite)
library(foreach)
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
library(radar)
library(radar)
seq(1, 500 - 100 + 10, 10)
yuima.qmle.seq <- function(data, delta = 1/252, summary = TRUE, drift, diffusion, hurst = 0.5, solve.variable = "x", start, ...) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, state.variable = solve.variable)
# check foreach further: even, uneven indexes; vector or matrix etc.
w <- 100
step <- 10
l <- seq(1, length(data) - w + step, step)
est = start
# parallel %dopar% or %do%
#r <- foreach::foreach(i=l, .combine = cbind, .packages="foreach") %do% {
r <- foreach::foreach(i = l, .combine = cbind) %do% {
dat <- data[seq(i, i+w-1)]
dat <- yuima::setData(dat, delta = delta)
yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
if (summary == TRUE)
return(jsonlite::toJSON(list( call = list(seq = l, w = 100, step = 10), coef = as.data.frame(t(r)))))
else
return(r)
}
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
yuima.qmle.seq <- function(data, delta = 1/252, summary = TRUE, drift, diffusion, hurst = 0.5, solve.variable = "x", start, ...) {
ymod <- yuima::setModel(drift = drift, diffusion = diffusion, hurst = hurst, solve.variable = solve.variable, state.variable = solve.variable)
# check foreach further: even, uneven indexes; vector or matrix etc.
w <- 100
step <- 10
n <- length(data)
l <- seq(1, n - w + step, step)
est = start
# parallel %dopar% or %do%
#r <- foreach::foreach(i=l, .combine = cbind, .packages="foreach") %do% {
r <- foreach::foreach(i = l, .combine = cbind) %do% {
dat <- data[seq(i, i+w-1)]
dat <- yuima::setData(dat, delta = delta)
yobj <- yuima::setYuima(model = ymod, data = dat)
res <- yuima::qmle(yobj, start = est, ...)
# To use estimates as start values in next or other qmle estimation set: start = as.list(res@coef)
est <- as.list(res@coef)
res@coef
}
if (summary == TRUE)
return(jsonlite::toJSON(list( call = list(seq = l, w = w, step = step, n = n), coef = as.data.frame(t(r)))))
else
return(r)
}
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
library(radar)
devtools::document()
library(radar)
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = TRUE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
install.packages(c("RSQLite", "foreach", "DBI"))
library(radar)
install.packages("testthat")
install.packages("roxygen2")
devtools::load_all(".")
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
# estimate once
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
?step
library(radar)
X <- yuima.simulate(setseed = TRUE, sumsim = FALSE, nsim = 1, drift = "mu * x", diffusion = "sigma * x", xinit = 100, hurst = 0.5, solve.variable = "x", Terminal = 1, n = 500, parameter = list(mu = 0.1, sigma = 0.07))
# estimate once
est <- yuima.qmle(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est <- as.list(est@coef)
est
est <- yuima.qmle.seq(data = X, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, window = 50, step = 5, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, window = 125, step = 5, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
est
est <- yuima.qmle.seq(data = X, window = 125, step = 5, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
mean(est[1,])
mean(est[2,])
est
plot(est)
plot(t(est))
est <- yuima.qmle.seq(data = X, window = 75, step = 1, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
plot(t(est))
length(est)
est
t(est)
ptm <- proc.time()
est <- yuima.qmle.seq(data = X, window = 100, step = 1, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
length(t(est))
12.24/802
ptm <- proc.time()
est <- yuima.qmle.seq(data = X, window = 100, step = 1, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
ptm <- proc.time()
est <- yuima.qmle.seq(data = X, window = 100, step = 1, delta = 1/500, summary = FALSE, drift = "mu * x", diffusion = "sigma * x", hurst = 0.5, solve.variable = "x", method="L-BFGS-B", start = list(mu = 0.15, sigma = 0.15), lower = list(mu = -0.5, sigma = 0), upper = list(mu = 0.5, sigma = 1))
proc.time() - ptm
?foreach
library(radar)
library(radar)
library(radar)
library(radar)
